{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Form/Input.js","components/Form/Button.js","components/Form/TextArea.js","utils/API.js","pages/landing-page/landing-page.js","components/BugCommentContainer/BugCommentContainer.js","components/BugCommentContainer/BugCommentPanel.js","pages/bug-view/bug-view.js","pages/profile/profile.js","App.js","index.js"],"names":["Col","props","className","size","split","map","join","children","Container","id","fluid","Row","Input","formgroupclass","htmlFor","label","isvalid","fielderror","Button","TextArea","rows","axios","get","userObj","post","userData","bugData","organizationMongoID","bugCommentData","_id","bugAndCommentData","mongoID","organizationData","LandingPage","formatInput","event","attribute","target","getAttribute","setState","value","trim","handleFormSubmit","preventDefault","emailAddressValid","firstNameValid","lastNameValid","passwordValid","formErrors","firstName","lastName","emailAddress","password","validateFields","handleLoginButtonClick","loginOrCreateAccountButtonClicked","loginButtonClicked","forgotPasswordButtonClicked","serverErrorMessage","handleCreateAccountButtonClick","handleForgotPasswordButtonClick","state","redirectTo","successMessage","e","this","nextProps","console","log","fieldValidationErrors","RegExp","test","length","_login","saveUser","sendForgotPasswordEmail","error","email","API","then","response","data","userId","username","user_email","to","pathname","onBlur","bind","toString","errorClass","onChange","handleChange","name","type","onClick","Component","withRouter","BugCommentContainer","BugCommentPanel","text","date","BugViewPage","delta","count","saveNewBugInDB","bugObj","bugTitle","bugTitleInModal","bugDescription","bugDescriptionInModal","userAssigned","bugUserAssignedInModal","status","bugStatusInModal","errorResponse","bugDoc","newMongoID","currentBugIndex","isCompleted","showModal","push","forceUpdate","updateBugInDB","selectedBug","updateOrCreateBug","bugTitleValid","isNewBug","newBugData","closeModal","currentBugCommentInModal","createNewBugButton","currentModalTitle","swapRenderCompletedBugs","showCompletedBugs","swapRenderActiveBugs","showActiveBugs","handleLogoutButtonClick","isLogin","currentCompletedBugIndex","showModal2","filteredCompletedBugData","filteredBugData","bugCommentsInModal","users","organizationUsers","userFilter","statusFilter","organizationNameInTitle","formSubmitButtonText","userFirstName","userLastName","isCurrentBugCompleted","bugs","bugArrayFromDB","organizationDoc","i","putAllBugsIntoFilteredArray","catch","err","bugClickedOn","bugMongoID","deletedBugDoc","deletedCount","index","indexOf","splice","adjustBugDataOrder","currentBug","res","renderBugComments","bugComments","bugComment","deleteBugInDB","organizationUsersArray","location","organizationName","getBugsFromDB","bug","assigneeFilterIsActive","statusFilterIsActive","href","user","key","scope","checked","completedCheck","variant","editBugButton","deleteBugButton","Modal","show","animation","Header","Title","Body","boundBugCommentClick","deleteBugComment","timestamp","placeholder","addBugComment","Footer","Profile","handleChangePasswordButtonClick","setPasswordFieldsActiveInModal","updatePasswordInDB","oldPassword","newPassword","newPassword1","newPassword1and2","organizationID","organizationIDValid","organizationNameValid","oldPasswordValid","newPassword1Valid","newPassword2Valid","organizationNameInModal","organizationIDInModal","newPassword2","handleCreateOrganizationButtonClick","setCreateOrganizationFieldsActiveInModal","setJoinOrganizationFieldsActiveInModal","setConfirmationBoxActiveInModal","handleJoinOrganizationButtonClick","handleSubmitButtonInModalClick","handleDeleteOrganizationInDB","currentOrganization","loggedIn","setEditOrganizationFieldsActiveInModal","organizationMongoIDInModal","newPassword1And2Valid","organizations","getOrganizationsOfUserInDB","attachUserToOrganizationInDB","saveOrganizationInDB","updateOrganizationInDB","organizationClickedOn","organization","isUserOrganizationOwner","userWhoCreatedOrgMongoID","organizationObj","userMongoID","handleEditOrganizationButtonClick","handleDeleteOrLeaveButtonClick","App","loggedInSuccess","exact","render","path","component","BugView","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.43fb4024.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Col = props =>\n  <div className={props.size.split(\" \").map(size => \"col-\" + size).join(\" \")} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Container = props =>\n  <div id={props.id} className={`container${props.fluid === \"true\"  ? \"-fluid\" : \"\"}`} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n//({ fluid, children, props })\nexport const Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props}> \n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Input = props =>\n  <div className={props.formgroupclass}>\n\n    <label htmlFor=\"inputField\">{props.label}</label>\n    <input className=\"form-control\" id=\"inputField\" {...props} />\n    {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\n  </div>;\n","import React from \"react\";\n\nexport const Button = props =>\n  <button {...props} className=\"btn btn-pill btn-light btn-lg\">\n    {props.children}\n  </button>;\n","import React from \"react\";\r\n\r\nexport const TextArea = props =>\r\n    <div className={props.formgroupclass}>\r\n        <label htmlFor=\"bugDescriptionField\">{props.label}</label>\r\n        <textarea className=\"form-control\" id=\"bugDescriptionField\" rows=\"5\" {...props}></textarea>\r\n        {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\r\n    </div>;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    // USER CALLS TO DB -----\r\n    user: function () {\r\n        return axios.get(\"/api/user\");\r\n    },\r\n    sendForgotPasswordEmail(userObj) {\r\n        return axios.post(\"/api/user/sendForgotPasswordEmail\", userObj);\r\n    },\r\n    updateUserInDB(userObj){\r\n        return axios.post(\"/api/user/updateUser\", userObj);\r\n    },\r\n    login: function (userData) {\r\n        return axios.post(\"/api/user/login\", userData)\r\n    },\r\n    saveUser: function (userData) {\r\n        return axios.post(\"/api/user/saveUser\", userData);\r\n    },\r\n\r\n    //BUG CALLS TO DB --------\r\n    saveBug: function (bugData) {\r\n        return axios.post(\"/api/bug/saveBug\", bugData);\r\n    },\r\n    updateBug: function (bugData) {\r\n        return axios.post(\"/api/bug/updateBug\", bugData);\r\n    },\r\n    deleteBug: function (bugData) {\r\n        return axios.post(\"/api/bug/deleteBug\", bugData);\r\n    },\r\n    getAllBugs: function (organizationMongoID) {\r\n        return axios.get(\"/api/bug/getAllBugs/\" + organizationMongoID);\r\n    },\r\n    \r\n\r\n    // BUG COMMENT CALLS  TO DB -------\r\n    deleteBugComment: function (bugCommentData) {\r\n        return axios.post(\"/api/bug/deleteBugComment/\" + bugCommentData._id);\r\n    },\r\n    saveBugComment: function(bugAndCommentData) {\r\n        return axios.post(\"/api/bug/saveBugComment\", bugAndCommentData);\r\n    },\r\n    getBugComments: function(bugData) {\r\n        return axios.get(\"/api/bug/getBugComments/\" + bugData.mongoID);\r\n    },\r\n\r\n    // ORGANIZATION CALLS TO DB ------\r\n    saveOrganizationInDB: function(userData) {\r\n        return axios.post(\"/api/organization/saveOrganization\", userData);\r\n    },\r\n    getOrganizationsOfUserInDB: function(userData){\r\n        return axios.get(\"/api/organization/getAllOrganizationsOfUser/\" + userData.mongoID);\r\n    },\r\n    attachUserToOrganizationInDB: function (userData) {\r\n        return axios.post(\"/api/organization/attachUserToOrganization\", userData);\r\n    },\r\n    deleteOrganizationInDB: function(organizationData){\r\n        return axios.post(\"/api/organization/deleteOrganization\", organizationData);\r\n    },\r\n    updateOrganizationInDB: function(userData){\r\n        return axios.post(\"/api/organization/updateOrganization\", userData)\r\n    }\r\n\r\n};","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport { withRouter } from 'react-router';\r\n\r\nimport \"./landing-page.css\";\r\nclass LandingPage extends Component {\r\n    constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        emailAddress: \"\",\r\n        password: \"\",\r\n        formErrors: {firstName: \"\", lastName: \"\", emailAddress:\"\", password:\"\"},\r\n          redirectTo: null,\r\n        firstNameValid: false,\r\n        lastNameValid: false,\r\n        passwordValid: false,\r\n        emailAddressValid: false,\r\n        loginOrCreateAccountButtonClicked: false,\r\n        loginButtonClicked: true,\r\n        forgotPasswordButtonClicked: false,\r\n        successMessage: \"\",\r\n        serverErrorMessage: \"\"\r\n    };\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    } \r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ serverErrorMessage: this.props.serverErrorMessage });\r\n    }\r\n    componentWillMount() {\r\n        console.log(\"IM IN THE LANDING PAGE??\");\r\n    }\r\n    //We use this method for validating all the fields.\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let emailAddressValid = this.state.emailAddressValid;\r\n        let firstNameValid = this.state.firstNameValid;\r\n        let lastNameValid = this.state.lastNameValid;\r\n        let passwordValid = this.state.passwordValid;\r\n\r\n        //Validating email using Regex\r\n        let regex = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\r\n         emailAddressValid = new RegExp(regex).test(this.state.emailAddress);\r\n        \r\n        fieldValidationErrors.emailAddress = emailAddressValid ? \"\" : \"Please provide a valid email\";\r\n\r\n        //Validating First Name by checking if there is anything there.\r\n        firstNameValid = this.state.firstName.length > 0;\r\n        fieldValidationErrors.firstName = firstNameValid ? \"\": \"Please provide your first name\";\r\n\r\n        //Validating Last Name by checking if there is anything there.\r\n        lastNameValid = this.state.lastName.length > 0;\r\n        fieldValidationErrors.lastName = lastNameValid ? \"\":\"Please provide your last name\";\r\n\r\n\r\n        if (!this.state.loginButtonClicked)\r\n        {\r\n        //validating password\r\n        passwordValid = this.state.password.length >= 6;\r\n        fieldValidationErrors.password = passwordValid ? \"\" : \"Please provide a password of atleast 8 characters\";\r\n        }\r\n\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            emailAddressValid: emailAddressValid,\r\n            firstNameValid: firstNameValid,\r\n            lastNameValid: lastNameValid,\r\n            passwordValid: passwordValid\r\n        }, () => {\r\n            if(this.state.loginButtonClicked && emailAddressValid){\r\n                //If the login button is clicked then we want submit LOGIN request, which is different than Create Account request\r\n                this.props._login(this.state.emailAddress, this.state.password);\r\n\r\n            }else if(this.state.loginOrCreateAccountButtonClicked && !this.state.loginButtonClicked && emailAddressValid && firstNameValid && lastNameValid && passwordValid){\r\n                //If Create Account button was clicked, then we want to post the user to the database.\r\n                this.saveUser();\r\n            }else if(this.state.forgotPasswordButtonClicked){\r\n                //If forgot password button was clicked.\r\n                this.sendForgotPasswordEmail();\r\n            }\r\n        });    \r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Below are all the button click methods - Just to set it up so before I actually submit data to DB ----------------------------------\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\" }\r\n        }, () => {\r\n                this.validateFields();\r\n        });\r\n\r\n    };\r\n\r\n    handleLoginButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: true, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }\r\n        })\r\n        \r\n    }\r\n    handleCreateAccountButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: false, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }        \r\n        })\r\n    }\r\n\r\n    handleForgotPasswordButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: false, loginButtonClicked: false, forgotPasswordButtonClicked: true,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n                        formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage:\"\" }       \r\n        })\r\n    }\r\n    // END of BUTTON CLICK METHODS\r\n\r\n    //Handle the call to the DB for forgot password\r\n    sendForgotPasswordEmail() {\r\n        let userObj = {\r\n            email: this.state.emailAddress\r\n        }\r\n\r\n        API.sendForgotPasswordEmail(userObj)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    this.setState({ serverErrorMessage: \"An email has been sent.\"});\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error })\r\n                }\r\n            })\r\n    }\r\n\r\n    //Method when user wants to create account\r\n    saveUser() {\r\n            let userObj = {\r\n                userId: null,\r\n                username: this.state.emailAddress,\r\n                password: this.state.password,\r\n                email: this.state.emailAddress,\r\n                user_email: this.state.email,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName\r\n            }\r\n            API.saveUser(userObj)\r\n                .then(response => {\r\n\r\n\r\n\r\n                    if (!response.data.error) {\r\n                        //Now that the user account is created, let's automatically login the user in\r\n                         this.props._login(this.state.emailAddress, this.state.password, userObj);\r\n\r\n        \r\n                    } else {\r\n                        //Usually this happens when an email address was already used.\r\n                        this.setState({ serverErrorMessage: response.data.error })\r\n                    }\r\n                })\r\n\r\n    }\r\n    render() {\r\n\r\n        if (this.props.redirectTo) {\r\n            return <Redirect to={{ pathname: this.props.redirectTo }} />\r\n        } else {\r\n        return (\r\n            <Container id=\"container\" fluid=\"true\">\r\n\r\n                <Row id=\"mainRow\">\r\n\r\n                    <hr id=\"hline\"></hr>\r\n                    <Col id=\"formCol\" size=\"sm-6\">\r\n                        <h1 id=\"loginBugSlayerTitle\">BugSlayer</h1>\r\n                        {this.state.loginOrCreateAccountButtonClicked ?\r\n                            <div>\r\n                                {this.state.loginButtonClicked ?\r\n                                    <h3 id=\"formHeader\">Login</h3>\r\n                                    :\r\n                                    <h3 id=\"formHeader\">Create Account</h3>\r\n\r\n                                }\r\n                                <form>\r\n                                    \r\n\r\n                                    {this.state.loginButtonClicked ?\r\n\r\n                                        \"\"\r\n                                        :\r\n\r\n                                        <div>\r\n                                           \r\n                                            <Input label=\"First Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.firstNameValid.toString()} fielderror={this.state.formErrors.firstName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.firstName)}`} value={this.state.firstName} id=\"firstName\" onChange={this.handleChange.bind(this)} name=\"firstName\"></Input>\r\n\r\n\r\n                                    \r\n                                            <Input label=\"Last Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.lastNameValid.toString()} fielderror={this.state.formErrors.lastName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.lastName)}`} value={this.state.lastName} id=\"lastName\" onChange={this.handleChange.bind(this)} name=\"lastName\"></Input>\r\n\r\n                                        </div>\r\n\r\n                                    }\r\n\r\n                               \r\n                                    <Input label=\"Email Address\" onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n\r\n                              \r\n                                    <Input label=\"Password\" type=\"password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.passwordValid.toString()} fielderror={this.state.formErrors.password} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.password)}`} value={this.state.password} id=\"password\" onChange={this.handleChange.bind(this)} name=\"password\"></Input>\r\n\r\n                                    <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n\r\n                                    {this.state.loginButtonClicked ?\r\n                                        <div>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" \r\n                                            onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n\r\n                                    }\r\n                                </form>\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                                <br />\r\n                            </div>\r\n                            : \r\n\r\n                            <div>\r\n\r\n                                {\r\n                                    this.state.forgotPasswordButtonClicked ?\r\n                                        <div>\r\n\r\n                                            <p><strong>Please enter your email address. If correct, we will send you an email!</strong></p>\r\n                                            <p>Email Address</p>\r\n                                            <Input onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n                                            <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n                                            \r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                        </div>\r\n                                            :                                                                                \r\n                                             <div>                                \r\n                                            <Button onClick={this.handleLoginButtonClick.bind(this)}> Login </Button>\r\n                                            <Button onClick={this.handleCreateAccountButtonClick.bind(this)}> Create Account </Button>\r\n                                            <Button onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</Button>      \r\n                                            </div>\r\n\r\n\r\n                                }\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n\r\n                            </div>\r\n                              \r\n                        }\r\n                        \r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n                }\r\n    \r\n            }\r\n}\r\n\r\n// export default LandingPage;\r\nexport default withRouter(LandingPage)\r\n","import React from \"react\";\r\n\r\n\r\nexport const BugCommentContainer = ({ children }) => (\r\n    <div id=\"wrapper\">\r\n        <div id=\"bugs\">\r\n            {children}\r\n        </div>\r\n        <div id=\"bugComments\"></div>\r\n    </div>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const BugCommentPanel = props => (\r\n    <div className='panel panel-default'>\r\n        <div className='panel-body note-panel'>\r\n            <p className=\"comment-text\"> {props.text} </p>\r\n            {props.children}\r\n            <p className=\"date-text\">{props.date}</p>\r\n        </div>\r\n    </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport {BugCommentContainer, BugCommentPanel } from \"../../components/BugCommentContainer\";\r\nimport API from \"../../utils/API\";\r\nimport \"./bug-view.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nclass BugViewPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formErrors: { bugTitle: \"\" },\r\n            bugTitleValid: false,\r\n            isLogin: true,\r\n            isNewBug: false,\r\n            selectedBug: \"\",\r\n            currentModalTitle: \"Edit Bug\",\r\n            currentBugIndex: 0,\r\n            currentCompletedBugIndex: 0,\r\n            showModal: false,\r\n            showModal2: false,\r\n            bugData: [],\r\n            filteredCompletedBugData: [],\r\n            filteredBugData: [],\r\n            bugTitleInModal: \"\",\r\n            bugCommentsInModal: [],\r\n            users: [{text: 'Tyler', id: '1'}, {text: 'Tawny', id: '2'}, {text: 'Anthony', id: '3'}, {text: 'Arthur', id:'4'}],\r\n            organizationUsers: [],\r\n            currentBugCommentInModal:\"\",\r\n            bugDescriptionInModal: \"\",\r\n            bugStatusInModal: \"\",\r\n            bugUserAssignedInModal: \"\",\r\n            userFilter: \"\",\r\n            statusFilter: \"\",\r\n            organizationMongoID: \"\",\r\n            organizationNameInTitle: \"\",\r\n            formSubmitButtonText: \"Submit\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            showActiveBugs: true,\r\n            showCompletedBugs: false,\r\n            isCurrentBugCompleted: false\r\n        };\r\n\r\n    }\r\n\r\n    delta = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        });\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n    //This method will handle all the form validation\r\n    validateFields() {   \r\n            let fieldValidationErrors = this.state.formErrors;\r\n            let bugTitleValid = this.state.bugTitleValid;\r\n\r\n\r\n            bugTitleValid = this.state.bugTitleInModal.length > 0;\r\n            fieldValidationErrors.bugTitle = bugTitleValid ? \"\" : \"Please add Bug Title.\";\r\n\r\n\r\n            this.setState({\r\n                formErrors: fieldValidationErrors,\r\n                bugTitleValid: bugTitleValid\r\n            }, () => {\r\n                    this.updateOrCreateBug();\r\n            });\r\n        \r\n\r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n    };\r\n\r\n\r\n    //************************** DB METHODS ************** THESE METHODS SAVE, EDIT, GET BUGS FROM DB *******************************************\r\n    saveNewBugInDB = () => {\r\n        var bugObj = {\r\n            organizationMongoID: this.state.organizationMongoID,\r\n            bugTitle: this.state.bugTitleInModal,\r\n            bugDescription: this.state.bugDescriptionInModal,\r\n            userAssigned: this.state.bugUserAssignedInModal,\r\n            status: this.state.bugStatusInModal\r\n        }\r\n\r\n        API.saveBug(bugObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    bugObj.mongoID = response.data.bugDoc._id;\r\n                    bugObj.newMongoID = response.data.bugDoc._id;\r\n                    bugObj.id = this.state.currentBugIndex;\r\n                    bugObj.isCompleted = response.data.isCompleted;\r\n\r\n                    this.setState({ showModal: false });\r\n                    this.state.bugData.push(bugObj);\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n    updateBugInDB = () => {\r\n        API.updateBug(this.state.selectedBug)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    this.setState({ showModal: false });\r\n\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    getBugsFromDB() {\r\n        API.getAllBugs(this.state.organizationMongoID)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    var bugs = [];\r\n                    var bugArrayFromDB = response.data.organizationDoc.bugs;\r\n                    //Loop through bug data received from the server.\r\n                    for (var i = 0; i < bugArrayFromDB.length; i++) {\r\n                            bugs.push({\r\n                                mongoID: bugArrayFromDB[i]._id,\r\n                                id: this.state.currentBugIndex,\r\n                                bugTitle: bugArrayFromDB[i].bugTitle,\r\n                                bugDescription: bugArrayFromDB[i].bugDescription,\r\n                                userAssigned: bugArrayFromDB[i].userAssigned,\r\n                                status: bugArrayFromDB[i].status,\r\n                                isCompleted: bugArrayFromDB[i].isCompleted\r\n                            })\r\n\r\n                        this.setState({ currentBugIndex: this.state.currentBugIndex + 1});\r\n\r\n                   }\r\n\r\n                    this.setState({ bugData: bugs});\r\n                    this.forceUpdate();\r\n\r\n                    //At default, we want to show all bugs in the table\r\n                    this.putAllBugsIntoFilteredArray();\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    deleteBugInDB(bugClickedOn) {\r\n        bugClickedOn.bugMongoID = bugClickedOn.mongoID;\r\n        bugClickedOn.organizationMongoID = this.state.organizationMongoID;\r\n        API.deleteBug(bugClickedOn)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    if (response.data.deletedBugDoc.deletedCount > 0){\r\n                         //Removing the bug from the UI\r\n                         const index = this.state.bugData.indexOf(bugClickedOn);\r\n                         if (index > -1) {\r\n                             this.state.bugData.splice(index, 1);\r\n                         }\r\n                         this.adjustBugDataOrder();\r\n                     }\r\n\r\n                     this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    // Below methods are related to bug comments\r\n    addBugComment() {\r\n        let currentBug = this.state.bugData[this.state.currentBugIndex];\r\n        if(currentBug){\r\n            currentBug.text = this.state.currentBugCommentInModal;\r\n       \r\n        if (this.state.currentBugCommentInModal) {\r\n            API.saveBugComment(currentBug)\r\n                .then(res => this.renderBugComments(currentBug))\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n         }\r\n\r\n    };\r\n    renderBugComments(bugData) {\r\n        API.getBugComments(bugData)\r\n            .then(res => {\r\n                if(res.data !== null){\r\n                    this.setState({\r\n                        bugCommentsInModal: res.data.bugComments,\r\n                        currentBugCommentInModal: \"\"\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    deleteBugComment(bugComment) {\r\n        API.deleteBugComment(bugComment)\r\n            .then(res => {\r\n                this.renderBugComments(this.state.bugData[this.state.currentBugIndex]);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n    // ****************** END OF DB METHODS*******************************************\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updateOrCreateBug = () => {\r\n        if(!this.state.bugTitleValid){\r\n            return;\r\n        }\r\n        if (this.state.isNewBug){\r\n            this.saveNewBugInDB();\r\n        } else {\r\n            var newBugData = this.state.bugData;\r\n            //UPDATE THE BUG DATA LOCALLY BEFORE PUSHING TO DB\r\n             newBugData[this.state.currentBugIndex].bugTitle = this.state.bugTitleInModal;\r\n             newBugData[this.state.currentBugIndex].bugDescription = this.state.bugDescriptionInModal;\r\n             newBugData[this.state.currentBugIndex].userAssigned = this.state.bugUserAssignedInModal;\r\n             newBugData[this.state.currentBugIndex].status = this.state.bugStatusInModal;\r\n\r\n            this.setState({selectedBug: this.state.bugData[this.state.currentBugIndex], bugData: newBugData});\r\n            this.updateBugInDB();\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        this.setState({ showModal: false, bugTitleInModal: \"\", bugDescriptionInModal: \"\", currentBugCommentInModal: \"\", \r\n        bugStatusInModal: \"\", bugUserAssignedInModal:\"\", formErrors: {bugTitle: \"\"} });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n\r\n    // ******************** THESE METHODS ARE CALLED WHEN CREATE/EDIT BUTTONS ARE FIRST CLICKED ******************\r\n    editBugButton(bugClickedOn) {\r\n        this.adjustBugDataOrder()\r\n        this.setState({ showModal: true, \r\n            currentModalTitle: \"Edit Bug\",\r\n            currentBugIndex: bugClickedOn.id,\r\n            bugTitleInModal: bugClickedOn.bugTitle, \r\n            bugDescriptionInModal: bugClickedOn.bugDescription, \r\n            bugStatusInModal: bugClickedOn.status,\r\n            bugUserAssignedInModal: bugClickedOn.userAssigned,\r\n            isNewBug: false, \r\n            selectedBug: bugClickedOn });\r\n        this.renderBugComments(bugClickedOn);\r\n    }\r\n    deleteBugButton(bugClickedOn){ \r\n        this.deleteBugInDB(bugClickedOn);\r\n    }\r\n\r\n    createNewBugButton = () => {\r\n        this.setState({ showModal: true, currentModalTitle: \"Create Bug\", isNewBug: true, bugTitleInModal: \"\", bugDescriptionInModal: \"\", bugUserAssignedInModal:\"\", bugStatusInModal:\"\" });\r\n    }\r\n    // ******************** END OF INITIAL BUTTON CLICK METHODS ******************\r\n\r\n\r\n\r\n    //CALLS THIS WHEN THE COMPONENT MOUNTS, basically \"on page load\"\r\n    componentDidMount() {\r\n        var organizationUsersArray = [];\r\n        for(var i =0; i<this.props.location.state.organizationUsers.length; i++){\r\n            organizationUsersArray.push(\r\n                {\r\n                    text: this.props.location.state.organizationUsers[i],\r\n                    id: i\r\n                }\r\n            )\r\n        }\r\n        //Grab props that were set from profile page and set them to state for easier access.\r\n        this.setState({ organizationMongoID: this.props.location.state.organizationMongoID, organizationNameInTitle: this.props.location.state.organizationName,\r\n            organizationUsers: organizationUsersArray,\r\n        userFirstName: this.props.location.state.userFirstName, userLastName: this.props.location.state.userLastName }, () => {\r\n            this.getBugsFromDB();\r\n        });\r\n\r\n        \r\n    } \r\n\r\n    putAllBugsIntoFilteredArray() {\r\n        this.setState({filteredBugData: []});\r\n        this.state.bugData.map(bug => {\r\n            return this.state.filteredBugData.push(bug);\r\n        });\r\n    }\r\n    adjustBugDataOrder() {\r\n        //Update the current page's id of the bug for UI purposes\r\n        for (var i = 0; i < this.state.bugData.length; i++) {\r\n            this.state.bugData[i].id = i;\r\n        }\r\n    }\r\n\r\n    //If you click \"Show Completed Bugs\" or \"Hide Completed Bugs\", this will show or hide.\r\n    swapRenderCompletedBugs = () => {\r\n        if(this.state.showCompletedBugs){\r\n            this.setState({showCompletedBugs: false})\r\n        }else {\r\n            this.setState({ showCompletedBugs: true })\r\n        }\r\n        \r\n    }\r\n    //If you click \"Show Active Bugs\" or \"Hide Active Bugs\", this will show or hide.\r\n    swapRenderActiveBugs = () => {\r\n        if (this.state.showActiveBugs) {\r\n            this.setState({ showActiveBugs: false })\r\n        } else {\r\n            this.setState({ showActiveBugs: true })\r\n        }\r\n    }\r\n\r\n    //Flip the value of \"isCompleted\" for the bug\r\n    completedCheck(bug){\r\n       if(bug.isCompleted){\r\n           bug.isCompleted = false;\r\n       }else {\r\n           bug.isCompleted = true;\r\n       }\r\n\r\n        this.setState({ selectedBug: bug }, () => {\r\n            this.updateBugInDB();\r\n            this.forceUpdate();\r\n        });\r\n\r\n    }\r\n    handleLogoutButtonClick = () => {\r\n\r\n    }\r\n    render() {\r\n\r\n\r\n\r\n        //FIRST WE FILTER THE NON COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\"){\r\n            this.state.filteredBugData  = [];\r\n            this.state.bugData.map(bug => {\r\n                \r\n               var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n            if (this.state.statusFilter === bug.status && this.state.statusFilter !== \"\")  {\r\n\r\n                statusFilterIsActive = true;\r\n            }          \r\n            if(this.state.userFilter === bug.userAssigned && this.state.userFilter !== \"\") {\r\n                assigneeFilterIsActive = true;\r\n            }\r\n            if (statusFilterIsActive && assigneeFilterIsActive && !bug.isCompleted){\r\n            return this.state.filteredBugData.push(bug);\r\n            } else if (statusFilterIsActive && this.state.userFilter === \"\" && !bug.isCompleted){\r\n                \r\n                return this.state.filteredBugData.push(bug);\r\n            }\r\n            else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && !bug.isCompleted) {\r\n                return this.state.filteredBugData.push(bug);\r\n            }\r\n        });\r\n          } else {\r\n            this.state.filteredBugData = [];\r\n            this.state.bugData.map(bug => {\r\n                    if(!bug.isCompleted){\r\n                    return this.state.filteredBugData.push(bug);\r\n                    }\r\n\r\n            });\r\n\r\n          }\r\n\r\n\r\n\r\n\r\n          // NOW WE WILL DO THE SAME LOGIC FOR COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\") {\r\n            this.state.filteredCompletedBugData = [];\r\n            this.state.bugData.map(bug => {\r\n\r\n                var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n                if (this.state.statusFilter === bug.status && this.state.statusFilter !== \"\") {\r\n\r\n                    statusFilterIsActive = true;\r\n                }\r\n                if (this.state.userFilter === bug.userAssigned && this.state.userFilter !== \"\") {\r\n                    assigneeFilterIsActive = true;\r\n                }\r\n                if (statusFilterIsActive && assigneeFilterIsActive && bug.isCompleted) {\r\n                    return this.state.filteredCompletedBugData.push(bug);\r\n                } else if (statusFilterIsActive && this.state.userFilter === \"\" && bug.isCompleted) {\r\n\r\n                    return this.state.filteredCompletedBugData.push(bug);\r\n                }\r\n                else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && bug.isCompleted) {\r\n                    return this.state.filteredCompletedBugData.push(bug);\r\n                }\r\n            });\r\n        } else {\r\n            this.state.filteredCompletedBugData = [];\r\n            this.state.bugData.map(bug => {\r\n                if(bug.isCompleted){\r\n                return this.state.filteredCompletedBugData.push(bug);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n        return (\r\n             <Container id=\"containerViewBugs\" fluid=\"true\">\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 BugtrackerTitle\" id=\"organizationNameInBugTitle\">{this.state.organizationNameInTitle}</h1>\r\n                                <h2 className=\"display-4 BugTrackerTitle\">View Bugs</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                        <Row>\r\n                            <Col size=\"sm-1\">\r\n                                {this.state.organizationUsers ?\r\n                                <div>\r\n                                <label htmlFor=\"userFilter\">Assignee </label>\r\n                                <select value={this.state.userFilter} onChange={this.handleChange.bind(this)} id=\"userFilter\" name=\"userFilter\">\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                        {this.state.organizationUsers.map(user => {\r\n                                        return (\r\n                                            <option className=\"dropdown-item\" href=\"#\" key={user.id} value={user.text}>{user.text}</option>\r\n                                              )\r\n                                        })\r\n                                     }\r\n                                </select>\r\n                                    </div>\r\n                                : \r\n                                \"\"}\r\n                            </Col>\r\n                            <Col size=\"sm-1\">\r\n                                <label htmlFor=\"statusFilter\">Status</label>\r\n                                <select value={this.state.statusFilter} onChange={this.handleChange.bind(this)} id=\"statusFilter\" name=\"statusFilter\">\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Open\">Open</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"In Development\">In Development</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Needs Testing\">Needs Testing</option>\r\n                                </select>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                <Link to=\"/profile\" className=\"log\" ><Button>View Profile</Button></Link>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                <Button type=\"button\" className=\"btn btn-primary\" onClick={this.createNewBugButton}>Create New Bug</Button>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                {this.state.showActiveBugs ?\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderActiveBugs.bind(this)}>Hide Active Bugs</Button>\r\n                                    :\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderActiveBugs.bind(this)}>Show Active Bugs</Button>\r\n                                }\r\n                                \r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                \r\n                                {this.state.showCompletedBugs ?\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderCompletedBugs.bind(this)}>Hide Completed Bugs</Button>\r\n                                    :\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderCompletedBugs.bind(this)}>Show Completed Bugs</Button>\r\n                                }\r\n                            </Col>\r\n                                       \r\n                        </Row>\r\n\r\n                        {this.state.showActiveBugs ?                   \r\n                       <div>\r\n                                <h1 className=\"activeBugsTitle\">Active Bugs</h1>\r\n                                {this.state.bugData.length ? (\r\n                                    <table id=\"bugViewTable_Table\" className=\"table table-hover bugViewTable_Table\">\r\n                                        <thead id=\"bugViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Complete</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Title</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">User Assigned</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Status</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\"></th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\"></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.filteredBugData.map(bug => {\r\n                                                return (\r\n                                                        <tr className=\"bugViewTable_tr\" key={bug.mongoID}>\r\n                                                                    <td id=\"isCompletedColumn\" className=\"bugViewTable_td\">\r\n\r\n                                                                        <label className=\"isCompletedContainer\">\r\n                                                                            <input type=\"checkbox\" checked={bug.isCompleted} onClick={() => this.completedCheck(bug)}\r\n                                                                                value={bug.isCompleted} onChange={this.handleChange.bind(this)} name=\"bugIsCompleted\"\r\n                                                                            />\r\n                                                                            <span className=\"checkmark\"></span>\r\n                                                                        </label>\r\n                                                                    </td>\r\n                                                                    <td id=\"titleColumn\" className=\"bugViewTable_td\">{bug.bugTitle}</td>\r\n                                                                    <td id=\"userAssignedColumn\" className=\"bugViewTable_td\">{bug.userAssigned}</td>\r\n                                                                    <td id=\"statusColumn\" className=\"bugViewTable_td\">{bug.status}</td>\r\n                                                                    <td id=\"editColumn\" className=\"bugViewTable_td\">\r\n                                                                        <Button variant=\"primary\" onClick={() => this.editBugButton(bug)}>\r\n                                                                            Edit\r\n                                                                        </Button>\r\n                                                                    </td>\r\n                                                                    <td id=\"deleteColumn\" className=\"bugViewTable_td\"> <Button variant=\"primary\" onClick={() => this.deleteBugButton(bug)}>Delete</Button></td>\r\n                                                        </tr>\r\n                                                    )\r\n                                     \r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n\r\n                                ) : (<h3 className=\"noResultsMessage\"> No Results to Display </h3>)} \r\n                       </div>\r\n                        \r\n                        \r\n                        \r\n                        : \r\n                        \r\n                        \r\n                        \"\"\r\n                    } \r\n                       \r\n\r\n                            {this.state.showCompletedBugs ? \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            <div>\r\n                                <hr />\r\n                                <h1 className=\"completedBugsTitle\">Completed Bugs</h1>\r\n                                {this.state.filteredCompletedBugData.length ? (\r\n                                    <div>\r\n                                    <table id=\"bugViewTable_Table\" className=\"table table-hover bugViewTable_Table\">\r\n                                        <thead id=\"bugViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Complete</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Title</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">User Assigned</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Status</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.filteredCompletedBugData.map(bug => {\r\n                                                return (\r\n                                                        \r\n                                                        <tr className=\"bugViewTable_tr\" key={bug.mongoID}>\r\n                                                            <td id=\"isCompletedColumn\" className=\"bugViewTable_td\">\r\n\r\n                                                                <label className=\"isCompletedContainer\">\r\n                                                                    <input type=\"checkbox\" checked={bug.isCompleted} onClick={() => this.completedCheck(bug)}\r\n                                                                        value={bug.isCompleted} onChange={this.handleChange.bind(this)} name=\"bugIsCompleted\"\r\n                                                                    />\r\n                                                                    <span className=\"checkmark\"></span>\r\n                                                                </label>\r\n\r\n\r\n                                                            </td>\r\n                                                            <td id=\"titleColumn\" className=\"bugViewTable_td\">{bug.bugTitle}</td>\r\n                                                            <td id=\"userAssignedColumn\" className=\"bugViewTable_td\">{bug.userAssigned}</td>\r\n                                                            <td id=\"statusColumn\" className=\"bugViewTable_td\">{bug.status}</td>\r\n                                                        </tr>\r\n                                         \r\n                                                )\r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                    </div>\r\n\r\n                                ) : (<h3 className=\"noResultsMessage\"> No Results to Display </h3>)} \r\n\r\n\r\n                            </div>\r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            :\r\n                                                      \r\n                            \r\n                            \"\"}\r\n\r\n                                <br />\r\n                                    <br />\r\n                                \r\n                       \r\n                       \r\n                \r\n                        {/* This modal will pop up for editing bugs! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Button className='btn btn-danger note-delete xButton' id=\"bugModalXButton\" onClick={() => this.closeModal()}>X</Button>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n\r\n                                <Input label=\"Title\" onBlur={this.formatInput.bind(this)} isvalid={this.state.bugTitleValid.toString()} \r\n                                fielderror={this.state.formErrors.bugTitle} value={this.state.bugTitleInModal} \r\n                                formgroupclass={`form-group ${this.errorClass(this.state.formErrors.bugTitle)}`}\r\n                                id=\"bugTitleInModal\" onChange={this.handleChange.bind(this)} name=\"bugTitleInModal\" />\r\n                                <br />\r\n                                {this.state.organizationUsers ?\r\n                                    <div>\r\n                                        <label htmlFor=\"bugUserAssignedInModal\"><strong>Assignee</strong></label> <br />\r\n                                        <select label=\"Assignee\" value={this.state.bugUserAssignedInModal} onChange={this.handleChange.bind(this)} id=\"bugUserAssignedInModal\" name=\"bugUserAssignedInModal\">\r\n                                            <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                            {this.state.organizationUsers.map(user => {\r\n                                                return (\r\n                                                    <option className=\"dropdown-item\" href=\"#\" key={user.id} value={user.text}>{user.text}</option>\r\n                                                )\r\n                                            })\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n                                    :\r\n                                    \"\"}\r\n                                <br />\r\n                                <label htmlFor=\"bugStatusInModal\"><strong>Status</strong></label>  <br />\r\n                                <select label=\"Status\" value={this.state.bugStatusInModal} onChange={this.handleChange.bind(this)} id=\"bugStatusInModal\" name=\"bugStatusInModal\">\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Open\">Open</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"In Development\">In Development</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Needs Testing\">Needs Testing</option>\r\n                                </select>\r\n\r\n                                <br />\r\n\r\n                                <br />\r\n\r\n                                <TextArea label=\"Description\" onBlur={this.formatInput.bind(this)} value={this.state.bugDescriptionInModal} id=\"bugDescriptionInModal\" onChange={this.handleChange.bind(this)} name=\"bugDescriptionInModal\" />\r\n\r\n                                {/* BUG COMMENT SECTION */}\r\n\r\n                                {this.state.isNewBug ? \r\n\r\n                                    \"\": <div>\r\n\r\n                                        <hr />\r\n                                        {this.state.bugCommentsInModal.length ? (\r\n                                            <BugCommentContainer>\r\n                                                <div className=\"bugCommentContainer\">\r\n                                                    {this.state.bugCommentsInModal.map(bugComment => {\r\n                                                        let boundBugCommentClick = this.deleteBugComment.bind(this, bugComment);\r\n                                                        return (\r\n                                                            <div>\r\n                                                                <Button className='btn btn-danger bugComment-delete insideNote' id='cancelInsideNote' onClick={boundBugCommentClick}> X </Button>\r\n                                                           \r\n                                                                <BugCommentPanel key={bugComment._id} text={this.state.userFirstName + \" \" + this.state.userLastName + \": \" + bugComment.text} date={bugComment.timestamp}>\r\n\r\n                                                            </BugCommentPanel>\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </BugCommentContainer>\r\n                                        ) : (\r\n                                                <h3> There are no comments! </h3>\r\n                                            )}\r\n\r\n\r\n                                        <Input placeholder='Bug Comment'\r\n                                            id=\"currentBugCommentInModal\"\r\n                                            onBlur={this.formatInput.bind(this)}\r\n                                            value={this.state.currentBugCommentInModal}\r\n                                            onChange={this.handleChange.bind(this)}\r\n                                            name=\"currentBugCommentInModal\"\r\n                                        />\r\n                                        <Button className='btn btn-success save' onClick={() => this.addBugComment()}>Save Comment</Button>\r\n\r\n                                    </div>\r\n                                }\r\n\r\n                                {/* END OF BUG COMMENT SECTION */}\r\n\r\n\r\n\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"primary\" onClick={this.handleFormSubmit}>\r\n                                    Submit\r\n                              </Button> \r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n                                \r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BugViewPage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport \"./profile.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withRouter } from 'react-router';\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName:\"\",\r\n            loggedIn: this.props.loggedIn,\r\n            redirectTo: null,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            setEditOrganizationFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            formErrors: { oldPassword: \"\", newPassword1and2:\"\", organizationName:\"\", organizationID:\"\" },\r\n            oldPassword: \"\",\r\n            newPassword1: \"\",\r\n            newPassword2: \"\",\r\n            organizationNameInModal: \"\",\r\n            organizationIDInModal: \"\",\r\n            organizationMongoIDInModal: \"\",\r\n            oldPasswordValid: true,\r\n            newPassword1And2Valid: false,\r\n            organizationNameValid: false,\r\n            organizationIDValid: false,\r\n            showModal: false,\r\n            formSubmitButtonText: \"Submit\",\r\n            successMessage: \"\",\r\n            serverErrorMessage:\"\",\r\n            currentModalTitle: \"\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            userData: [],\r\n            organizations: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ userFirstName: this.props.firstName, userLastName: this.props.lastName});\r\n        this.getOrganizationsOfUserInDB();\r\n        \r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Standard method for constantly updating input, since UI is constantly refreshing\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let newPassword1And2Valid = this.state.newPassword1And2Valid;\r\n        let organizationNameValid =  this.state.organizationNameValid;\r\n        let organizationIDValid = this.state.organizationIDValid;\r\n\r\n        //Validating between the new password field and \"confirm password\" field that they match and are greather than or equal to 6 characters\r\n        newPassword1And2Valid = (this.state.newPassword1 === this.state.newPassword2) && this.state.newPassword1.length >= 6;\r\n        fieldValidationErrors.newPassword1and2 = \"New password doesn't match or your password is less than 8 characters long.\";\r\n\r\n        //Validating that organization is greater than 3 characters\r\n        organizationNameValid = this.state.organizationNameInModal.length >= 3;\r\n        fieldValidationErrors.organizationName = \"Organization Name must have atleast three characters.\";\r\n\r\n        //Validating that organization ID is greater than 6 characters\r\n        organizationIDValid = this.state.organizationIDInModal.length >= 6;\r\n        fieldValidationErrors.organizationID = \"Organization ID must have atleast six characters.\";\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            newPassword1And2Valid: newPassword1And2Valid,\r\n            organizationIDValid: organizationIDValid,\r\n            organizationNameValid: organizationNameValid\r\n        }, () => {\r\n                if (this.state.setJoinOrganizationFieldsActiveInModal) {\r\n                    //for JOIN organization\r\n                    if (organizationIDValid){\r\n                     this.attachUserToOrganizationInDB();\r\n                    }\r\n                } else if (this.state.setCreateOrganizationFieldsActiveInModal) {\r\n                    //For CREATE organization\r\n                    if(organizationNameValid && organizationIDValid){\r\n                        this.saveOrganizationInDB();\r\n                    }\r\n                } else if (this.state.setEditOrganizationFieldsActiveInModal) {\r\n                    //For UPDATE Organization\r\n                    if(organizationNameValid && organizationIDValid){\r\n\r\n                        this.updateOrganizationInDB();\r\n                    }\r\n                } else if (this.state.setPasswordFieldsActiveInModal) {\r\n                    //For UPDATE password\r\n                    if (newPassword1And2Valid){     \r\n                        this.updatePasswordInDB();\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    \r\n    handleChangePasswordButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Change Password\",\r\n            setPasswordFieldsActiveInModal: true\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updatePasswordInDB = () => {\r\n\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n        API.updateUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.setState({ successMessage: \"Successfully updated password.\"})\r\n                    this.closeModal();\r\n\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error, formErrors: { oldPassword: \"\", newPassword1and2: \"\", organizationName: \"\", organizationID: \"\", serverErrorMessage: \"\" }})\r\n                }\r\n            })\r\n        \r\n    }\r\n    closeModal = () => {\r\n        //Reset all the fields so they don't show up again when you try to open the modal again.\r\n        this.setState({ showModal: false, organizationIDValid: true,\r\n        organizationNameValid: true, oldPasswordValid: true, newPassword1Valid: true, newPassword2Valid: true,\r\n            organizationNameInModal: \"\", organizationIDInModal: \"\", oldPassword: \"\", newPassword: \"\", newPassword2: \"\", serverErrorMessage:\"\",\r\n            formErrors: { oldPassword: \"\", newPassword1and2: \"\", organizationName: \"\", organizationID: \"\", serverErrorMessage: \"\", formSubmitButtonText: \"Submit\" } });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n    //*************************METHODS BELOW RELATED TO ORGANIZATION BUTTON CLICKS ******************/\r\n    handleEditOrganizationButtonClick(organizationClickedOn) {\r\n        //event.preventDefault();\r\n\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Edit Organization\",\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setEditOrganizationFieldsActiveInModal: true,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            organizationMongoIDInModal: organizationClickedOn._id,\r\n            organizationNameInModal: organizationClickedOn.name,\r\n            organizationIDInModal: organizationClickedOn.organizationID\r\n        });\r\n    }\r\n\r\n    handleCreateOrganizationButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Create Organization\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: true,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            organizationIDInModal: \"\",\r\n            organizationNameInModal: \"\"\r\n        });\r\n\r\n    }\r\n\r\n    handleJoinOrganizationButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Join Organization\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            setJoinOrganizationFieldsActiveInModal: true\r\n        })\r\n\r\n    }\r\n    handleDeleteOrLeaveButtonClick(organization) {\r\n        this.setState({ setConfirmationBoxActiveInModal: true, showModal: true, currentOrganization: organization,\r\n            currentModalTitle: \"\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            formSubmitButtonText: \"Confirm\",\r\n            successMessage: \"\",\r\n            organizationIDInModal: \"\",\r\n            organizationNameInModal: \"\"    \r\n        });\r\n    }\r\n\r\n    //*** METHODS BELOW RELATED TO DB WITH ORGANIZATIONS */ */\r\n    saveOrganizationInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            organizationName: this.state.organizationNameInModal,\r\n            organizationID: this.state.organizationIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.saveOrganizationInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getOrganizationsOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({serverErrorMessage: response.data.error})\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    getOrganizationsOfUserInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n\r\n        API.getOrganizationsOfUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of organizations. Update state with organizations.\r\n\r\n                    this.setState({\r\n                        organizations: response.data.organizations,\r\n                    })\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    attachUserToOrganizationInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            organizationID: this.state.organizationIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n        API.attachUserToOrganizationInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of organizations. Update state with organizations.\r\n                    this.setState({\r\n                        organizations: response.data.organizations,\r\n                        successMessage: \"You successfully joined the organization!\"\r\n                    })\r\n                    this.closeModal();\r\n                    this.getOrganizationsOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({ serverErrorMessage: response.data.error });\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleDeleteOrganizationInDB(organizationClickedOn) {\r\n        var isUserOrganizationOwner = false;\r\n        if (this.props.mongoID === organizationClickedOn.userWhoCreatedOrgMongoID){\r\n            isUserOrganizationOwner = true;\r\n        }\r\n        var organizationObj = {\r\n            organizationMongoID: organizationClickedOn._id,\r\n            userMongoID: this.props.mongoID,\r\n            organizationData: organizationClickedOn,\r\n            isUserOrganizationOwner: isUserOrganizationOwner,\r\n            userFirstName: this.state.userFirstName,\r\n            userLastName: this.state.userLastName\r\n        }\r\n        API.deleteOrganizationInDB(organizationObj)\r\n            .then(res => {\r\n                this.setState({currentOrganization: \"\"});\r\n                this.getOrganizationsOfUserInDB();\r\n                this.forceUpdate();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    updateOrganizationInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            organizationMongoID: this.state.organizationMongoIDInModal,\r\n            organizationName: this.state.organizationNameInModal,\r\n            organizationID: this.state.organizationIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.updateOrganizationInDB(userObj)\r\n            .then(response => {\r\n                //If not error from server\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getOrganizationsOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleSubmitButtonInModalClick = () => {\r\n        if(this.state.setConfirmationBoxActiveInModal){\r\n            //In this case we are confirming to delete or leave an organization.\r\n            this.setState({setConfirmationBoxActiveInModal: false, showModal: false}, () => {\r\n                    this.handleDeleteOrganizationInDB(this.state.currentOrganization);\r\n            }\r\n            )\r\n        }else {\r\n            this.validateFields();\r\n        }\r\n    }\r\n\r\n    handleLogoutButtonClick = () => {\r\n\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <Container id=\"containerViewBugs\" fluid=\"true\">\r\n\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 BugTrackerTitle\">Welcome, {this.props.firstName}!</h1>\r\n                                <h2 className=\"display-4 BugTrackerTitle\" id=\"successMessage\">{this.state.successMessage}</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <Button onClick={this.handleChangePasswordButtonClick.bind(this)}>Change Password</Button>\r\n                        <Button onClick={this.handleCreateOrganizationButtonClick.bind(this)}>Create Organization</Button>\r\n                        <Button onClick={this.handleJoinOrganizationButtonClick.bind(this)}>Join Organization</Button>\r\n                        <br />\r\n                        <br />\r\n                        {this.state.organizations.length > 0 ? (\r\n                            <table id=\"organizationTable_Table\" className=\"table table-hover bugViewTable_Table\">\r\n                                <thead id=\"organizationTable_head\" className=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\">Name</th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\">Organization ID</th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.organizations.map(organization => {\r\n                                        return (\r\n                                            <tr className=\"organizationTable_tr\" key={organization._id}>\r\n                                                <td id=\"organizationNameColumn\" className=\"organizationTable_td\">{organization.name}</td>\r\n                                                <td id=\"organizationIDColumn\" className=\"organizationTable_td\">{organization.organizationID}</td>\r\n                                                <td id=\"viewBugColumn\" className=\"organizationTable_td\">\r\n                                                    \r\n                                                    <Link to={{pathname: \"/bug-view\", state: {organizationMongoID: organization._id, organizationName: organization.name, organizationUsers: organization.users, userFirstName: this.state.userFirstName, userLastName: this.state.userLastName}}} className=\"log\" ><Button>View Bugs</Button></Link>\r\n                                                    </td>\r\n                                                <td id=\"editColumn\" className=\"organizationTable_td\">\r\n                                                    {this.props.mongoID === organization.userWhoCreatedOrgMongoID ?\r\n                                                        <Button variant=\"primary\" onClick={() => this.handleEditOrganizationButtonClick(organization)}>\r\n                                                            Edit\r\n                                                        </Button> : \"\"\r\n\r\n                                                    }\r\n                                                </td>\r\n                                                <td id=\"deleteColumn\" className=\"organizationTable_td\">\r\n                                                    {this.props.mongoID === organization.userWhoCreatedOrgMongoID ?\r\n\r\n                                                        < Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(organization)}>Delete</Button> \r\n                                                        : \r\n                                                        <Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(organization)}>Leave</Button> \r\n                                                    }\r\n                                                     </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n\r\n                        ) : (<h3 id=\"noResultsHeader\"> No Results to Display </h3>)}\r\n                        <br />\r\n                        <br />\r\n\r\n                        {/* This modal will pop up for changing password! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                {this.state.setConfirmationBoxActiveInModal ?\r\n                                    <h1 id=\"confirmationHeader\">Are you sure?</h1>   \r\n                                :\r\n                                    <div>\r\n                                        {this.state.setPasswordFieldsActiveInModal ?\r\n                                            <div>\r\n                                                <Input type=\"password\" label=\"Old Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.oldPasswordValid.toString()}\r\n                                                    fielderror={this.state.formErrors.oldPassword}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.oldPassword)}`}\r\n                                                    value={this.state.oldPassword}\r\n                                                    id=\"oldPassword\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"oldPassword\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"New Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword1and2}\r\n                                                    id=\"newPassword1\" onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword1\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"Confirm New Password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword2}\r\n                                                    id=\"newPassword2\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword2\"></Input>\r\n\r\n                                            </div>\r\n                                            :\r\n                                            <div>\r\n                                                {this.state.setJoinOrganizationFieldsActiveInModal ?\r\n                                                    <div>\r\n                                                        <Input label=\"Please enter the Organization ID of the organization you wish to join:\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.organizationIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.organizationID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.organizationID)}`}\r\n                                                            value={this.state.organizationIDInModal}\r\n                                                            id=\"organizationIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"organizationIDInModal\"></Input>\r\n\r\n                                                    </div>\r\n                                                    :\r\n                                                    <div>\r\n                                                        <Input label=\"Organization Name\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.organizationNameValid.toString()}\r\n                                                            fielderror={this.state.formErrors.organizationName}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.organizationName)}`}\r\n                                                            value={this.state.organizationNameInModal}\r\n                                                            id=\"organizationNameInModal\"\r\n                                                            onChange={this.handleChange.bind(this)}\r\n                                                            name=\"organizationNameInModal\"></Input>\r\n\r\n                                                        <Input label=\"Organization ID (Use this ID to invite people)\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.organizationIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.organizationID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.organizationID)}`}\r\n                                                            value={this.state.organizationIDInModal}\r\n                                                            id=\"organizationIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"organizationIDInModal\"></Input>\r\n                                                    </div>\r\n\r\n                                                }\r\n\r\n                                            </div>\r\n\r\n                                        }\r\n\r\n                                    </div>\r\n                                }\r\n                        \r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                                    Cancel\r\n                                  </Button>\r\n                                <Button variant=\"primary\" onClick={this.handleSubmitButtonInModalClick.bind(this)}>\r\n                                {this.state.formSubmitButtonText}\r\n                                </Button>\r\n\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n    \r\n}\r\n}\r\n\r\n// export default Profile;\r\nexport default withRouter(Profile);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"./pages/landing-page\";\nimport BugView from \"./pages/bug-view\";\nimport Profile from \"./pages/profile\";\nimport API from \"./utils/API\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      loggedIn: false,\n      user: null,\n      userId: null,\n      firstName: null,\n      lastName: null,\n      mongoID: null,\n      password: null,\n      redirectTo: null,\n      serverErrorMessage: \"\"\n    }\n    this._login = this._login.bind(this)\n  }\n  componentDidMount() {\n    API.user().then(response => {\n      if (!!response.data.user) {\n        this.setState({\n          loggedIn: true,\n          userId: response.data.user._id,\n        });\n      } else {\n        this.setState({\n          loggedIn: false,\n          // redirectTo: \"/landing-page\",\n          user: null\n        })\n      }\n    })\n  }\n\n  _login(username, password) {\n    var userData = {\n      username: username,\n      password: password,\n    }\n    API\n      .login(userData)\n      .then(response => {\n        if (response.status === 200) {\n          if (response.data.loggedInSuccess) {\n            // update the state\n            this.setState({\n              loggedIn: true,\n              // user: response.data.user,\n              // userId: response.data.user._id,\n              username: response.data.username,\n              mongoID: response.data.mongoID,\n              firstName: response.data.firstName,\n              lastName: response.data.lastName,\n              password: response.data.password,\n              redirectTo: \"/profile\"\n            })\n            //this.props.history.push(\"/profile\");\n\n\n          } else {\n            this.setState({\n              loggedIn: false,\n              serverErrorMessage: response.data.error\n            }, () => {\n              this.forceUpdate();\n            })\n\n          }\n        }\n      })\n  }\n\n  render() {\n    //IF USER IS AUTHENTICATED RENDER THIS\n    if (this.state.loggedIn) {\n      return (\n\n        <div className=\"App\">\n          <div>\n\n            <Redirect exact to={{ pathname: this.state.redirectTo }} render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n\n            <Route exact path=\"/landing-page\"\n              render={() =>\n                <LandingPage\n                  _login={this._login}\n                  serverErrorMessage={this.state.serverErrorMessage}\n                />} />\n            <Route exact path=\"/bug-view\" component={BugView} />\n            <Route exact path=\"/profile\" render={() => <Profile loggedIn={this.state.loggedIn} username={this.state.username} mongoID={this.state.mongoID} firstName={this.state.firstName} lastName={this.state.lastName} />} />\n\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/landing-page\" />\n            )} />\n\n          </div>\n        </div>\n\n      )\n    }\n\n\n    //IF USER IS NOT AUTHENTICATED, RENDER JUST THE LANDING PAGE\n    return (\n      <div className=\"App\">\n        <div>\n          <Route exact path=\"/landing-page\"\n            render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/landing-page\" />\n          )} />\n\n          <Redirect from=\"*\" to=\"/landing-page\" />\n\n        </div>\n      </div>\n    )\n  }\n\n}\nexport default App;\n// export default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from 'react-router-dom'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nReactDOM.render(\n <BrowserRouter>   \n   <Switch>\n      <Route component={App} />\n   </Switch>\n </BrowserRouter>\n\n  , document.getElementById(\"root\"));\n\n"],"sourceRoot":""}