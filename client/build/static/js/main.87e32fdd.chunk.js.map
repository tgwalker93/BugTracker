{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Form/Input.js","components/Form/Button.js","components/Form/TextArea.js","utils/API.js","pages/landing-page/landing-page.js","pages/bug-view/bug-view.js","pages/create-bug/create-bug.js","App.js","index.js"],"names":["Col","props","className","size","split","map","join","children","Container","id","fluid","Row","Input","formgroupclass","isvalid","fielderror","Button","TextArea","htmlFor","label","rows","userData","console","log","axios","post","bugData","get","LandingPage","formatInput","event","attribute","target","getAttribute","setState","value","trim","handleFormSubmit","preventDefault","validateFields","handleSaveUser","saveUser","createAccount","isLogin","state","firstName","lastName","emailAddress","password","phoneNumber","guestCount","formErrors","firstNameValid","lastNameValid","passwordValid","emailAddressValid","phoneNumberValid","guestCountValid","e","this","fieldValidationErrors","match","length","setCookieAndChangePage","error","obj","numbers","replace","substring","char","0","3","6","i","userObj","userId","username","email","user_email","user_address","address","user_city","city","user_state","user_zip","zip","API","then","response","data","errorResponse","cookies","Cookies","charAt","toUpperCase","slice","set","path","history","push","onBlur","bind","toString","errorClass","onChange","handleChange","name","onClick","Component","BugViewPage","delta","count","closeModal","showModal","editBugButton","currentModalTitle","updateOrCreateBug","bugObj","bugTitle","bugTitleInModal","bugDescription","bugDescriptionInModal","forceUpdate","createNewBugButton","isCreateBug","currentBugIndex","showModal2","sampleBugViewTableData","bugs","mongoID","_id","properties","catch","err","getBugsFromDB","scope","bug","key","variant","type","Modal","show","animation","Header","Title","Body","Footer","BugTitle","BugDescription","App","exact","component","landingpage","bugview","createbug","render","to","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.87e32fdd.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Col = props =>\n  <div className={props.size.split(\" \").map(size => \"col-\" + size).join(\" \")} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Container = props =>\n  <div id={props.id} className={`container${props.fluid === \"true\"  ? \"-fluid\" : \"\"}`} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n//({ fluid, children, props })\nexport const Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props}> \n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Input = props =>\n  <div className={props.formgroupclass}>\n\n    <input className=\"form-control\" {...props} />\n    {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\n  </div>;\n","import React from \"react\";\n\nexport const Button = props =>\n  <button {...props} className=\"btn btn-pill btn-light btn-lg\">\n    {props.children}\n  </button>;\n","import React from \"react\";\r\n\r\nexport const TextArea = props =>\r\n    <div className={props.formgroupclass}>\r\n        <label htmlFor=\"bugDescriptionField\">{props.label}</label>\r\n        <textarea className=\"form-control\" id=\"bugDescriptionField\" rows=\"5\" {...props}></textarea>\r\n        {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\r\n    </div>;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    saveUser: function (userData) {\r\n        console.log(\"I'm in the API file\");\r\n        console.log(userData);\r\n        //return axios.post(\"/api/users/saveUser\", userData)\r\n        return axios.post(\"/api/user/saveUser\", userData);\r\n    },\r\n    saveBug: function (bugData) {\r\n        console.log(\"I'm in the API file\");\r\n        console.log(bugData);\r\n        //return axios.post(\"/api/users/saveUser\", userData)\r\n        return axios.post(\"/api/bug/saveBug\", bugData);\r\n    },\r\n    getAllBugs: function() {\r\n        //TODO - Set up organization ID query\r\n        //Query db to get all bugs\r\n        return axios.get(\"/api/bug/getAllBugs\")\r\n    }\r\n\r\n};","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport Cookies from 'universal-cookie';\r\nimport API from \"../../utils/API\";\r\nimport \"./landing-page.css\";\r\nclass LandingPage extends Component {\r\n    constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        emailAddress: \"\",\r\n        password: \"\",\r\n        phoneNumber: \"\",\r\n        guestCount: \"\",\r\n        formErrors: {firstName: \"\", lastName: \"\", emailAddress:\"\", phoneNumber:\"\", guestCount:\"\", password:\"\"},\r\n        firstNameValid: false,\r\n        lastNameValid: false,\r\n        passwordValid: false,\r\n        emailAddressValid: false,\r\n        phoneNumberValid: false,\r\n        guestCountValid: false,\r\n        isLogin: true\r\n\r\n    };\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    } \r\n\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let emailAddressValid = this.state.emailAddressValid;\r\n        let firstNameValid = this.state.firstNameValid;\r\n        let lastNameValid = this.state.lastNameValid;\r\n        let phoneNumberValid = this.state.phoneNumberValid;\r\n        let guestCountValid = this.state.guestCountValid;\r\n        let passwordValid = this.state.passwordValid;\r\n\r\n        //Validating email using Regex\r\n        let matchArray = this.state.emailAddress.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n        if(matchArray !== null) {\r\n            emailAddressValid = true;\r\n        }\r\n        fieldValidationErrors.emailAddress = emailAddressValid ? \"\" : \"Please provide a valid email\";\r\n\r\n        //Validating First Name by checking if there is anything there.\r\n        firstNameValid = this.state.firstName.length >0;\r\n        fieldValidationErrors.firstName = firstNameValid ? \"\": \"Please provide your first name\";\r\n\r\n        //Validating Last Name by checking if there is anything there.\r\n        lastNameValid = this.state.lastName.length > 0;\r\n        fieldValidationErrors.lastName = lastNameValid ? \"\":\"Please provide your last name\";\r\n\r\n        //Validating phone number by checking if there are 16 digits. (counting the special characters besides the digits.)\r\n        phoneNumberValid = this.state.phoneNumber.length===16;\r\n        fieldValidationErrors.phoneNumber = phoneNumberValid ? \"\":\"Please provide a phone number\";\r\n\r\n        //validating password\r\n        passwordValid = this.state.password.length === 2;\r\n        fieldValidationErrors.password = passwordValid ? \"\" : \"Please provide a password\";\r\n\r\n        //Validate guest count by checking if user made a selection.\r\n        guestCountValid = true;\r\n        if(this.state.guestCount === \"\" || this.state.guestCount===\"Select\"){\r\n            guestCountValid = false;\r\n        }\r\n        fieldValidationErrors.guestCount = guestCountValid ? \"\": \"Please provide guest count\";\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            emailAddressValid: emailAddressValid,\r\n            firstNameValid: firstNameValid,\r\n            lastNameValid: lastNameValid,\r\n            phoneNumberValid: phoneNumberValid,\r\n            guestCountValid: guestCountValid,\r\n            passwordValid: passwordValid\r\n        }, () => {\r\n            this.setCookieAndChangePage();\r\n        });    \r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    formatPhone(obj) {\r\n        if(obj == null){\r\n            return;\r\n        }\r\n        var numbers = obj.state.phoneNumber.replace(/\\D/g, \"\").substring(0,10),\r\n            char = { 0: \"(\", 3: \") \", 6: \" - \" };\r\n        obj.state.phoneNumber = \"\";\r\n        for (var i = 0; i < numbers.length; i++) { \r\n            obj.state.phoneNumber += (char[i] || \"\") + numbers[i];    \r\n        }\r\n    }\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();    \r\n        this.validateFields();\r\n    };\r\n\r\n    handleSaveUser = event => {\r\n            event.preventDefault();\r\n            this.saveUser();\r\n\r\n   \r\n    }\r\n\r\n    createAccount = event => {\r\n        event.preventDefault();\r\n        this.setState({isLogin: false});\r\n\r\n    };\r\n\r\n\r\n    saveUser() {\r\n        console.log(\"HELLO?!?!!?!\");\r\n        console.log(this.state.passwordValid + \" passwordvalid?\");\r\n        // if (this.state.passwordValid && this.state.firstNameValid && this.state.lastNameValid) {\r\n\r\n            console.log(\"we good\");\r\n            let userObj = {\r\n                userId: null,\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n                email: this.state.emailAddress,\r\n                user_email: this.state.email,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                user_address: this.state.address,\r\n                user_city: this.state.city,\r\n                user_state: this.state.state,\r\n                user_zip: this.state.zip\r\n            }\r\n            API.saveUser(userObj)\r\n                .then(response => {\r\n\r\n\r\n\r\n                    if (!response.data.error) {\r\n                        // userObj.userId = response.data.doc._id;\r\n                        // this.props._login(this.state.username, this.state.password, userObj);\r\n                        // this.setState({\r\n                        //     redirectTo: '/profile'\r\n                        // })\r\n                        console.log(\"I WAS SUCCESSFUL FROM LANDING PAGE\");\r\n                    } else {\r\n                        this.setState({ errorResponse: response })\r\n                    }\r\n                })\r\n\r\n        // }\r\n    }\r\n    setCookieAndChangePage() {\r\n\r\n        //This function will be called once all fields are validated. If any are not valid, the binary \"valid\" variable will be false.\r\n        if (this.state.firstNameValid && this.state.lastNameValid && this.state.emailAddressValid && this.state.phoneNumberValid && this.state.guestCountValid) {\r\n\r\n            const cookies = new Cookies();\r\n\r\n            var userObj = {\r\n                \"firstName\": this.state.firstName.charAt(0).toUpperCase() + this.state.firstName.slice(1),\r\n                \"lastName\": this.state.lastName.charAt(0).toUpperCase() + this.state.lastName.slice(1),\r\n                \"emailAddress\": this.state.emailAddress,\r\n                \"phoneNumber\": this.state.phoneNumber,\r\n                \"guestCount\": this.state.guestCount\r\n            }\r\n\r\n            cookies.set(\"demo-requested\", userObj, { path: \"/\" });\r\n            this.props.history.push(\"/thank-you\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container id=\"container\" fluid=\"true\">\r\n\r\n                <Row id=\"mainRow\">\r\n\r\n                    <hr id=\"hline\"></hr>\r\n                    <Col id=\"formCol\" size=\"sm-6\">\r\n                        <h1>BugSlayer</h1>\r\n                        {/* <h1 id=\"formHeader\">Login</h1> */}\r\n\r\n                        {this.state.isLogin ?\r\n\r\n                            <h1 id=\"formHeader\">Login</h1>\r\n                            :\r\n                            \r\n                            <h1 id=\"formHeader\">Create Account</h1>\r\n\r\n                        }\r\n                        <form>\r\n\r\n                        {this.state.isLogin ? \r\n\r\n                                \"\"\r\n                        :\r\n                        \r\n                               <div>\r\n                                    <p>First Name</p>\r\n                                    <Input onBlur={this.formatInput.bind(this)} isvalid={this.state.firstNameValid.toString()} fielderror={this.state.formErrors.firstName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.firstName)}`} value={this.state.firstName} id=\"firstName\" onChange={this.handleChange.bind(this)} name=\"firstName\"></Input>\r\n                            \r\n                            \r\n                                    <p>Last Name</p>\r\n                                    <Input onBlur={this.formatInput.bind(this)} isvalid={this.state.lastNameValid.toString()} fielderror={this.state.formErrors.lastName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.lastName)}`} value={this.state.lastName} id=\"lastName\" onChange={this.handleChange.bind(this)} name=\"lastName\"></Input>\r\n                            \r\n                                </div>\r\n   \r\n                 }\r\n                    \r\n\r\n                    \r\n                        <p>Email Address</p>\r\n                        <Input onBlur={this.formatInput.bind(this)}isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n\r\n                        <p>Password</p>\r\n                            <Input onBlur={this.formatInput.bind(this)} isvalid={this.state.passwordValid.toString()} fielderror={this.state.formErrors.password} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.password)}`} value={this.state.password} id=\"password\" onChange={this.handleChange.bind(this)} name=\"password\"></Input>\r\n\r\n                            <Button onClick={this.handleFormSubmit.bind(this)}> Login </Button>\r\n                            <Button onClick={this.createAccount.bind(this)}> Create Account </Button>\r\n                            <Button onClick={this.handleSaveUser.bind(this)}> Submit </Button>\r\n                        </form>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { BugListTableRow } from \"../../components/BugListTableRow\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport Cookies from 'universal-cookie';\r\nimport API from \"../../utils/API\";\r\nimport \"./bug-view.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass BugViewPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            emailAddress: \"\",\r\n            password: \"\",\r\n            phoneNumber: \"\",\r\n            guestCount: \"\",\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", phoneNumber: \"\", guestCount: \"\", password: \"\" },\r\n            firstNameValid: false,\r\n            lastNameValid: false,\r\n            passwordValid: false,\r\n            emailAddressValid: false,\r\n            phoneNumberValid: false,\r\n            guestCountValid: false,\r\n            isLogin: true,\r\n            currentModalTitle: \"Edit Bug\",\r\n            currentBugIndex: 0,\r\n            showModal: false,\r\n            showModal2: false,\r\n            sampleBugViewTableData: [{ id: \"1\", bugTitle: \"Title A\", bugDescription: \"Test A\" }, { id: \"2\", bugTitle: \"Title B\", bugDescription: \"Test B\" }, { id: \"3\", bugTitle: \"Title C\", bugDescription: \"Test C\"}],\r\n            bugData: [],\r\n            bugTitleInModal: \"\",\r\n            bugDescriptionInModal: \"\",\r\n        };\r\n\r\n    }\r\n\r\n    delta = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        });\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    validateFields() {\r\n\r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n    };\r\n\r\n\r\n    closeModal = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n\r\n    // MAKE DB UPDATE ON EDIT BUTTOn. Currently, each edit modal is not bound to bug Object.\r\n    editBugButton = () => {\r\n        this.setState({ showModal: true, currentModalTitle: \"Edit Bug\" });\r\n    }\r\n\r\n    updateOrCreateBug = () => {\r\n\r\n        let bugObj = {\r\n            bugTitle: this.state.bugTitleInModal,\r\n            bugDescription: this.state.bugDescriptionInModal\r\n         }\r\n        \r\n        API.saveBug(bugObj)\r\n            .then(response => {\r\n\r\n\r\n\r\n                if (!response.data.error) {\r\n                    console.log(\"I WAS SUCCESSFUL Saving Bug FROM Bug View PAGE\");\r\n                    this.setState({ showModal: false });\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n    createNewBugButton = () => {\r\n        this.setState({ showModal: true, currentModalTitle: \"Create Bug\", isCreateBug: true });\r\n    }\r\n\r\n    getBugsFromDB() {\r\n        API.getAllBugs()\r\n        .then(response => {\r\n            if (!response.data.error) {\r\n                console.log(\"SUCCESSFULLY GOT BUGS FROM DB\");\r\n                var bugs = [];\r\n                //Loop through bug data received from the server.\r\n                for(var i=0; i<response.data.length; i++){\r\n                    bugs.push({\r\n                        mongoID: response.data[this.state.currentBugIndex]._id,\r\n                        id: this.state.currentBugIndex,     \r\n                        bugTitle: response.data[this.state.currentBugIndex].properties.bugTitle, \r\n                        bugDescription: response.data[this.state.currentBugIndex].properties.bugDescription})\r\n                         this.setState({ currentBugIndex: this.state.currentBugIndex+1 });\r\n                }\r\n                 this.setState({bugData: bugs});\r\n                 console.log(\"Here is bug data!\");\r\n                 console.log(bugs);\r\n            } else {\r\n                this.setState({ errorResponse: response })\r\n            }\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getBugsFromDB();\r\n    } \r\n\r\n\r\n    render() {\r\n        return (\r\n             <Container id=\"containerViewBugs\" fluid=\"true\">\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 BugTrackerTitle\">View Bugs</h1>\r\n                            </Container>\r\n                        </div>\r\n                        <p><strong>Assignee </strong> </p>\r\n                         <select>\r\n                            <option value=\"\"></option>\r\n                            <option value=\"Tyler\">Tyler</option>\r\n                            <option value=\"Brian\">Tawny</option>\r\n                            <option value=\"Brian\">Anthony</option>\r\n                            <option value=\"Brian\">Arthur</option>\r\n\t                    </select>\r\n                            <br />\r\n                                <br />\r\n                        {this.state.bugData.length ? (\r\n                        <table id=\"bugViewTable_Table\" className=\"table table-hover bugViewTable_Table\">\r\n                            <thead id=\"bugViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                    <th className=\"bugViewTable_th\" scope=\"col\">Bug Title</th>\r\n                                    <th className=\"bugViewTable_th\" scope=\"col\">Bug Description</th>\r\n                                    <th className=\"bugViewTable_th\" scope=\"col\"></th>\r\n                                            </tr>\r\n                                </thead>\r\n                                        <tbody>\r\n                                    {this.state.bugData.map(bug => {\r\n                                    return(\r\n                                        <tr className=\"bugViewTable_tr\" key={bug.mongoID}>\r\n                                            <td className=\"bugViewTable_td\">{bug.bugTitle}</td>\r\n                                            <td className=\"bugViewTable_td\">{bug.bugDescription}</td>\r\n                                            <td id=\"editColumn\" className=\"bugViewTable_td\">                                \r\n                                                <Button variant=\"primary\" onClick={this.editBugButton}>\r\n                                                    Edit\r\n                                            </Button>\r\n                                            </td>\r\n                                            </tr>\r\n                                    )\r\n                                })}\r\n                                    </tbody>\r\n                                    </table>\r\n\r\n\r\n                        ) : ( <h3> No Results to Display </h3>  )} \r\n                                <br />\r\n                                    <br />\r\n                        <Button type=\"button\" className=\"btn btn-primary\" onClick={this.createNewBugButton}>Create New Bug</Button>\r\n\r\n                       \r\n                       \r\n                       \r\n                \r\n                        {/* This modal will pop up for editing bugs! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Modal.Title>{this.state.currentModalTitle}</Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                <p>Bug Title</p>\r\n                                <Input onBlur={this.formatInput.bind(this)} value={this.state.bugTitleInModal} id=\"bugTitleInModal\" onChange={this.handleChange.bind(this)} name=\"bugTitleInModal\" />\r\n\r\n\r\n                                <TextArea label=\"Bug Description\" onBlur={this.formatInput.bind(this)} value={this.state.bugDescriptionInModal} id=\"bugDescriptionInModal\" onChange={this.handleChange.bind(this)} name=\"bugDescriptionInModal\" />\r\n\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                                    Close\r\n                                  </Button>\r\n                                <Button variant=\"primary\" onClick={this.updateOrCreateBug}>\r\n                                    Save Changes\r\n                              </Button>\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n                                \r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BugViewPage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { BugListTableRow } from \"../../components/BugListTableRow\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport Cookies from 'universal-cookie';\r\nimport API from \"../../utils/API\";\r\nimport \"./create-bug.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass BugViewPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            bugTitle: \"\",\r\n            bugDescription: \"\",\r\n            sampleBugViewTableData: [{ id: \"1\", BugTitle: \"Title A\", BugDescription: \"Test A\" }, { id: \"2\", BugTitle: \"Title B\", BugDescription: \"Test B\" }, { id: \"3\", BugTitle: \"Title C\", BugDescription: \"Test C\" }]\r\n        };\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Standard method for constantly updating input, since UI is constantly refreshing\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container id=\"containerViewBugs\" fluid=\"true\">\r\n\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 BugTrackerTitle\">Create Bug Task</h1>\r\n                            </Container>\r\n                        </div>\r\n                        \r\n                        <p>Bug Title</p>\r\n                        <Input onBlur={this.formatInput.bind(this)} value={this.state.emailAddress} id=\"BugTitle\" onChange={this.handleChange.bind(this)} name=\"BugTitle\" />\r\n\r\n                        \r\n                        <TextArea label=\"Bug Description\" onBlur={this.formatInput.bind(this)} value={this.state.emailAddress} id=\"BugDescription\" onChange={this.handleChange.bind(this)} name=\"BugDescription\"/>\r\n\r\n                        <Button>Save Bug</Button><Button>View Bugs</Button>\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BugViewPage;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport landingpage from \"./pages/landing-page\";\nimport bugview from \"./pages/bug-view\";\nimport createbug from \"./pages/create-bug\";\nimport \"./App.css\";\n\nconst App = () => \n  <Router>\n  <div>\n    <Switch>\n      <Route exact path=\"/landing-page\" component={landingpage} />\n      <Route exact path=\"/bug-view\" component={bugview} />\n      <Route exact path=\"/create-bug\" component={createbug} />\n      <Route exact path=\"/\" render={() => (\n        <Redirect to=\"/landing-page\" />\n      )} />\n      <Route component={landingpage} />\n    </Switch>\n  </div>\n  </Router>;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}