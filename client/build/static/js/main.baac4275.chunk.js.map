{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Form/Input.js","components/Form/Button.js","components/Form/TextArea.js","utils/API.js","pages/landing-page/landing-page.js","components/BugCommentContainer/BugCommentContainer.js","components/BugCommentContainer/BugCommentPanel.js","pages/bug-view/bug-view.js","pages/profile/profile.js","App.js","index.js"],"names":["Col","props","className","size","split","map","join","children","Container","id","fluid","Row","Input","formgroupclass","htmlFor","label","isvalid","fielderror","Button","TextArea","rows","axios","get","userObj","post","userData","bugData","organizationMongoID","bugCommentData","_id","bugAndCommentData","mongoID","organizationData","LandingPage","formatInput","event","attribute","target","getAttribute","setState","value","trim","handleFormSubmit","preventDefault","emailAddressValid","firstNameValid","lastNameValid","passwordValid","formErrors","firstName","lastName","emailAddress","password","validateFields","handleLoginButtonClick","loginOrCreateAccountButtonClicked","loginButtonClicked","forgotPasswordButtonClicked","serverErrorMessage","handleCreateAccountButtonClick","handleForgotPasswordButtonClick","state","redirectTo","successMessage","e","this","nextProps","fieldValidationErrors","RegExp","test","length","_login","saveUser","sendForgotPasswordEmail","error","email","API","then","response","data","userId","username","user_email","to","pathname","onBlur","bind","toString","errorClass","onChange","handleChange","name","type","onClick","Component","withRouter","BugCommentContainer","BugCommentPanel","text","date","BugViewPage","delta","count","saveNewBugInDB","bugObj","bugTitle","bugTitleInModal","bugDescription","bugDescriptionInModal","userAssigned","bugUserAssignedInModal","status","bugStatusInModal","errorResponse","bugDoc","newMongoID","currentBugIndex","isCompleted","showModal","push","forceUpdate","updateBugInDB","selectedBug","updateOrCreateBug","bugTitleValid","isNewBug","newBugData","closeModal","currentBugCommentInModal","createNewBugButton","currentModalTitle","handleLogoutButtonClick","window","location","reload","swapRenderCompletedBugs","showCompletedBugs","swapRenderActiveBugs","showActiveBugs","isLogin","currentCompletedBugIndex","showModal2","filteredCompletedBugData","filteredBugData","bugCommentsInModal","users","organizationUsers","userFilter","statusFilter","organizationNameInTitle","formSubmitButtonText","userFirstName","userLastName","isCurrentBugCompleted","bugs","bugArrayFromDB","organizationDoc","i","putAllBugsIntoFilteredArray","catch","err","console","log","bugClickedOn","bugMongoID","deletedBugDoc","deletedCount","index","indexOf","splice","adjustBugDataOrder","currentBug","res","renderBugComments","bugComments","bugComment","deleteBugInDB","organizationUsersArray","organizationName","getBugsFromDB","bug","assigneeFilterIsActive","statusFilterIsActive","href","user","key","scope","checked","completedCheck","variant","editBugButton","deleteBugButton","Modal","show","animation","Header","Title","Body","boundBugCommentClick","deleteBugComment","timestamp","placeholder","addBugComment","Footer","Profile","handleChangePasswordButtonClick","setPasswordFieldsActiveInModal","updatePasswordInDB","oldPassword","newPassword","newPassword1","newPassword1and2","organizationID","organizationIDValid","organizationNameValid","oldPasswordValid","newPassword1Valid","newPassword2Valid","organizationNameInModal","organizationIDInModal","newPassword2","handleCreateOrganizationButtonClick","setCreateOrganizationFieldsActiveInModal","setJoinOrganizationFieldsActiveInModal","setConfirmationBoxActiveInModal","handleJoinOrganizationButtonClick","handleSubmitButtonInModalClick","handleDeleteOrganizationInDB","currentOrganization","loggedIn","setEditOrganizationFieldsActiveInModal","organizationMongoIDInModal","newPassword1And2Valid","organizations","getOrganizationsOfUserInDB","attachUserToOrganizationInDB","saveOrganizationInDB","updateOrganizationInDB","organizationClickedOn","organization","isUserOrganizationOwner","userWhoCreatedOrgMongoID","organizationObj","userMongoID","handleEditOrganizationButtonClick","handleDeleteOrLeaveButtonClick","App","loggedInSuccess","exact","render","path","component","BugView","from","ReactDOM","document","getElementById"],"mappings":"wTAEaA,EAAM,SAAAC,GAAK,OACtB,uCAAKC,UAAWD,EAAME,KAAKC,MAAM,KAAKC,KAAI,SAAAF,GAAI,MAAI,OAASA,KAAMG,KAAK,MAAUL,GAC7EA,EAAMM,WCFEC,EAAY,SAAAP,GAAK,OAC5B,uCAAKQ,GAAIR,EAAMQ,GAAIP,UAAS,mBAA8B,SAAhBD,EAAMS,MAAoB,SAAW,KAAUT,GACtFA,EAAMM,WCFEI,EAAM,SAAAV,GAAK,OACtB,uCAAKC,UAAS,aAAQD,EAAMS,MAAQ,SAAW,KAAUT,GACtDA,EAAMM,WCFEK,EAAQ,SAAAX,GAAK,OACxB,yBAAKC,UAAWD,EAAMY,gBAEpB,2BAAOC,QAAQ,cAAcb,EAAMc,OACnC,yCAAOb,UAAU,eAAeO,GAAG,cAAiBR,IACjC,SAAlBA,EAAMe,QAAqB,GAAK,0BAAMd,UAAU,cAAcD,EAAMgB,cCL5DC,EAAS,SAAAjB,GAAK,OACzB,4CAAYA,EAAZ,CAAmBC,UAAU,kCAC1BD,EAAMM,WCFEY,EAAW,SAAAlB,GAAK,OACzB,yBAAKC,UAAWD,EAAMY,gBAClB,2BAAOC,QAAQ,uBAAuBb,EAAMc,OAC5C,4CAAUb,UAAU,eAAeO,GAAG,sBAAsBW,KAAK,KAAQnB,IACtD,SAAlBA,EAAMe,QAAqB,GAAK,0BAAMd,UAAU,cAAcD,EAAMgB,c,gBCJ9D,EAGL,WACF,OAAOI,IAAMC,IAAI,cAJV,WAMaC,GACpB,OAAOF,IAAMG,KAAK,oCAAqCD,IAPhD,WASIA,GACX,OAAOF,IAAMG,KAAK,uBAAwBD,IAVnC,EAYJ,SAAUE,GACb,OAAOJ,IAAMG,KAAK,kBAAmBC,IAb9B,EAeD,SAAUA,GAChB,OAAOJ,IAAMG,KAAK,qBAAsBC,IAhBjC,EAoBF,SAAUC,GACf,OAAOL,IAAMG,KAAK,mBAAoBE,IArB/B,EAuBA,SAAUA,GACjB,OAAOL,IAAMG,KAAK,qBAAsBE,IAxBjC,EA0BA,SAAUA,GACjB,OAAOL,IAAMG,KAAK,qBAAsBE,IA3BjC,EA6BC,SAAUC,GAClB,OAAON,IAAMC,IAAI,uBAAyBK,IA9BnC,EAmCO,SAAUC,GACxB,OAAOP,IAAMG,KAAK,6BAA+BI,EAAeC,MApCzD,EAsCK,SAASC,GACrB,OAAOT,IAAMG,KAAK,0BAA2BM,IAvCtC,EAyCK,SAASJ,GACrB,OAAOL,IAAMC,IAAI,2BAA6BI,EAAQK,UA1C/C,EA8CW,SAASN,GAC3B,OAAOJ,IAAMG,KAAK,qCAAsCC,IA/CjD,EAiDiB,SAASA,GACjC,OAAOJ,IAAMC,IAAI,+CAAiDG,EAASM,UAlDpE,EAoDmB,SAAUN,GACpC,OAAOJ,IAAMG,KAAK,6CAA8CC,IArDzD,EAuDa,SAASO,GAC7B,OAAOX,IAAMG,KAAK,uCAAwCQ,IAxDnD,EA0Da,SAASP,GAC7B,OAAOJ,IAAMG,KAAK,uCAAwCC,ICrD5DQ,G,wDACF,WAAYhC,GAAO,IAAD,8BAClB,cAAMA,IAuFNiC,YAAc,SAACC,GACX,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QAC5C,EAAKC,SAAL,eAAiBH,EAAYD,EAAME,OAAOG,MAAMC,UA1FlC,EA8FlBC,iBAAmB,SAAAP,GACfA,EAAMQ,iBACN,EAAKJ,SAAS,CACVK,mBAAmB,EAAMC,gBAAgB,EAAMC,eAAe,EAAMC,eAAe,EACnFC,WAAY,CAAEC,UAAW,GAAIC,SAAU,GAAIC,aAAc,GAAIC,SAAU,MACxE,WACK,EAAKC,qBApGC,EAyGlBC,uBAAyB,SAAAnB,GACrBA,EAAMQ,iBACN,EAAKJ,SAAS,CAAEgB,mCAAmC,EAAMC,oBAAoB,EAAMC,6BAA6B,EAChGb,mBAAmB,EAAMC,gBAAgB,EAAMC,eAAe,EAAMC,eAAe,EAC/FC,WAAY,CAAEC,UAAW,GAAIC,SAAU,GAAIC,aAAc,GAAIC,SAAU,GAAIM,mBAAoB,OA7GrF,EAiHlBC,+BAAiC,SAAAxB,GAC7BA,EAAMQ,iBACN,EAAKJ,SAAS,CAAEgB,mCAAmC,EAAMC,oBAAoB,EAAOC,6BAA6B,EACjGb,mBAAmB,EAAMC,gBAAgB,EAAMC,eAAe,EAAMC,eAAe,EAC/FC,WAAY,CAAEC,UAAW,GAAIC,SAAU,GAAIC,aAAc,GAAIC,SAAU,GAAIM,mBAAoB,OArHrF,EAyHlBE,gCAAkC,SAAAzB,GAC9BA,EAAMQ,iBACN,EAAKJ,SAAS,CAAEgB,mCAAmC,EAAOC,oBAAoB,EAAOC,6BAA6B,EAClGb,mBAAmB,EAAMC,gBAAgB,EAAMC,eAAe,EAAMC,eAAe,EACnFC,WAAY,CAAEC,UAAW,GAAIC,SAAU,GAAIC,aAAc,GAAIC,SAAU,GAAIM,mBAAmB,OA3HlH,EAAKG,MAAQ,CACTZ,UAAW,GACXC,SAAU,GACVC,aAAc,GACdC,SAAU,GACVJ,WAAY,CAACC,UAAW,GAAIC,SAAU,GAAIC,aAAa,GAAIC,SAAS,IAClEU,WAAY,KACdjB,gBAAgB,EAChBC,eAAe,EACfC,eAAe,EACfH,mBAAmB,EACnBW,mCAAmC,EACnCC,oBAAoB,EACpBC,6BAA6B,EAC7BM,eAAgB,GAChBL,mBAAoB,IAjBN,E,yDAqBLM,GACTC,KAAK1B,SAAL,eAAiByB,EAAE3B,OAAO5B,GAAKuD,EAAE3B,OAAOG,U,gDAIlB0B,GACtBD,KAAK1B,SAAS,CAAEmB,mBAAoBO,KAAKhE,MAAMyD,uB,uCAGjC,IAAD,OACTS,EAAwBF,KAAKJ,MAAMb,WACnCJ,EAAoBqB,KAAKJ,MAAMjB,kBAC/BC,EAAiBoB,KAAKJ,MAAMhB,eAC5BC,EAAgBmB,KAAKJ,MAAMf,cAC3BC,EAAgBkB,KAAKJ,MAAMd,cAI9BH,EAAoB,IAAIwB,OADb,wCAC2BC,KAAKJ,KAAKJ,MAAMV,cAEvDgB,EAAsBhB,aAAeP,EAAoB,GAAK,+BAG9DC,EAAiBoB,KAAKJ,MAAMZ,UAAUqB,OAAS,EAC/CH,EAAsBlB,UAAYJ,EAAiB,GAAI,iCAGvDC,EAAgBmB,KAAKJ,MAAMX,SAASoB,OAAS,EAC7CH,EAAsBjB,SAAWJ,EAAgB,GAAG,gCAG/CmB,KAAKJ,MAAML,qBAGhBT,EAAgBkB,KAAKJ,MAAMT,SAASkB,QAAU,EAC9CH,EAAsBf,SAAWL,EAAgB,GAAK,qDAItDkB,KAAK1B,SAAS,CACVS,WAAYmB,EACZvB,kBAAmBA,EACnBC,eAAgBA,EAChBC,cAAeA,EACfC,cAAeA,IAChB,WACI,EAAKc,MAAML,oBAAsBZ,EAEhC,EAAK3C,MAAMsE,OAAO,EAAKV,MAAMV,aAAc,EAAKU,MAAMT,UAEjD,EAAKS,MAAMN,oCAAsC,EAAKM,MAAML,oBAAsBZ,GAAqBC,GAAkBC,GAAiBC,EAE/I,EAAKyB,WACA,EAAKX,MAAMJ,6BAEhB,EAAKgB,+B,iCAONC,GACP,OAAyB,IAAjBA,EAAMJ,OAAe,GAAK,c,gDA+CX,IAAD,OAClB/C,EAAU,CACVoD,MAAOV,KAAKJ,MAAMV,cAGtByB,EAA4BrD,GACvBsD,MAAK,SAAAC,GACGA,EAASC,KAAKL,MAGf,EAAKnC,SAAS,CAAEmB,mBAAoBoB,EAASC,KAAKL,QAFlD,EAAKnC,SAAS,CAAEmB,mBAAoB,iC,iCAQxC,IAAD,OACCnC,EAAU,CACVyD,OAAQ,KACRC,SAAUhB,KAAKJ,MAAMV,aACrBC,SAAUa,KAAKJ,MAAMT,SACrBuB,MAAOV,KAAKJ,MAAMV,aAClB+B,WAAYjB,KAAKJ,MAAMc,MACvB1B,UAAWgB,KAAKJ,MAAMZ,UACtBC,SAAUe,KAAKJ,MAAMX,UAEzB0B,EAAarD,GACRsD,MAAK,SAAAC,GAIGA,EAASC,KAAKL,MAOf,EAAKnC,SAAS,CAAEmB,mBAAoBoB,EAASC,KAAKL,QALjD,EAAKzE,MAAMsE,OAAO,EAAKV,MAAMV,aAAc,EAAKU,MAAMT,SAAU7B,Q,+BAYjF,OAAI0C,KAAKhE,MAAM6D,WACJ,kBAAC,IAAD,CAAUqB,GAAI,CAAEC,SAAUnB,KAAKhE,MAAM6D,cAG5C,kBAAC,EAAD,CAAWrD,GAAG,YAAYC,MAAM,QAE5B,kBAAC,EAAD,CAAKD,GAAG,WAEJ,wBAAIA,GAAG,UACP,kBAAC,EAAD,CAAKA,GAAG,UAAUN,KAAK,QACnB,wBAAIM,GAAG,uBAAP,aACCwD,KAAKJ,MAAMN,kCACR,6BACKU,KAAKJ,MAAML,mBACR,wBAAI/C,GAAG,cAAP,SAEA,wBAAIA,GAAG,cAAP,kBAGJ,8BAGKwD,KAAKJ,MAAML,mBAER,GAGA,6BAEI,kBAAC,EAAD,CAAOzC,MAAM,aAAasE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOjD,QAASiD,KAAKJ,MAAMhB,eAAe0C,WAAYtE,WAAYgD,KAAKJ,MAAMb,WAAWC,UAAWpC,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWC,YAAcT,MAAOyB,KAAKJ,MAAMZ,UAAWxC,GAAG,YAAYgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAO0B,KAAK,cAItU,kBAAC,EAAD,CAAO5E,MAAM,YAAYsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOjD,QAASiD,KAAKJ,MAAMf,cAAcyC,WAAYtE,WAAYgD,KAAKJ,MAAMb,WAAWE,SAAUrC,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWE,WAAaV,MAAOyB,KAAKJ,MAAMX,SAAUzC,GAAG,WAAWgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAO0B,KAAK,cAOxU,kBAAC,EAAD,CAAO5E,MAAM,gBAAgBsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOjD,QAASiD,KAAKJ,MAAMjB,kBAAkB2C,WAAYtE,WAAYgD,KAAKJ,MAAMb,WAAWG,aAActC,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWG,eAAiBX,MAAOyB,KAAKJ,MAAMV,aAAc1C,GAAG,eAAegF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAO0B,KAAK,iBAGxV,kBAAC,EAAD,CAAO5E,MAAM,WAAW6E,KAAK,WAAWP,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOjD,QAASiD,KAAKJ,MAAMd,cAAcwC,WAAYtE,WAAYgD,KAAKJ,MAAMb,WAAWI,SAAUvC,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWI,WAAaZ,MAAOyB,KAAKJ,MAAMT,SAAU3C,GAAG,WAAWgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAO0B,KAAK,aAE/U,kBAAC,EAAD,CAAQE,QAAS5B,KAAKvB,iBAAiB4C,KAAKrB,OAA5C,YAECA,KAAKJ,MAAML,mBACR,6BACI,wBAAI/C,GAAG,iBAAiBP,UAAU,iBAClC2F,QAAS5B,KAAKN,+BAA+B2B,KAAKrB,OADlD,2BAEA,wBAAIxD,GAAG,iBAAiBP,UAAU,iBAAiB2F,QAAS5B,KAAKL,gCAAgC0B,KAAKrB,OAAtG,qBAGJ,6BACA,wBAAIxD,GAAG,iBAAiBP,UAAU,iBAAiB2F,QAAS5B,KAAKX,uBAAuBgC,KAAKrB,OAA7F,kBACA,wBAAIxD,GAAG,iBAAiBP,UAAU,iBAAiB2F,QAAS5B,KAAKL,gCAAgC0B,KAAKrB,OAAtG,sBAKR,0BAAM/D,UAAU,iCAAiC+D,KAAKJ,MAAMH,oBAC5D,8BAIJ,6BAGQO,KAAKJ,MAAMJ,4BACP,6BAEI,2BAAG,4GACH,4CACA,kBAAC,EAAD,CAAO4B,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOjD,QAASiD,KAAKJ,MAAMjB,kBAAkB2C,WAAYtE,WAAYgD,KAAKJ,MAAMb,WAAWG,aAActC,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWG,eAAiBX,MAAOyB,KAAKJ,MAAMV,aAAc1C,GAAG,eAAegF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAO0B,KAAK,iBAClU,kBAAC,EAAD,CAAQE,QAAS5B,KAAKvB,iBAAiB4C,KAAKrB,OAA5C,YAEA,wBAAIxD,GAAG,iBAAiBP,UAAU,iBAAiB2F,QAAS5B,KAAKX,uBAAuBgC,KAAKrB,OAA7F,kBACA,wBAAIxD,GAAG,iBAAiBP,UAAU,iBAAiB2F,QAAS5B,KAAKN,+BAA+B2B,KAAKrB,OAArG,4BAGC,6BACD,kBAAC,EAAD,CAAQ4B,QAAS5B,KAAKX,uBAAuBgC,KAAKrB,OAAlD,WACA,kBAAC,EAAD,CAAQ4B,QAAS5B,KAAKN,+BAA+B2B,KAAKrB,OAA1D,oBACA,kBAAC,EAAD,CAAQ4B,QAAS5B,KAAKL,gCAAgC0B,KAAKrB,OAA3D,qBAKZ,0BAAM/D,UAAU,iCAAiC+D,KAAKJ,MAAMH,4B,GA1QlEoC,cA4RXC,cAAW9D,GCjSb+D,EAAsB,SAAC,GAAD,IAAGzF,EAAH,EAAGA,SAAH,OAC/B,yBAAKE,GAAG,WACJ,yBAAKA,GAAG,QACHF,GAEL,yBAAKE,GAAG,kBCNHwF,EAAkB,SAAAhG,GAAK,OAChC,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,yBACX,uBAAGA,UAAU,gBAAb,IAA8BD,EAAMiG,KAApC,KACCjG,EAAMM,SACP,uBAAGL,UAAU,aAAaD,EAAMkG,S,wBCwtB7BC,E,kDArtBX,WAAYnG,GAAQ,IAAD,8BACf,cAAMA,IAqCVoG,MAAQ,WACJ,EAAK9D,SAAS,CACV+D,MAAO,EAAKzC,MAAMyC,MAAQ,KAxCf,EAyEnBpE,YAAc,SAACC,GACX,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QAC5C,EAAKC,SAAL,eAAiBH,EAAYD,EAAME,OAAOG,MAAMC,UA3EjC,EA+EnBC,iBAAmB,SAAAP,GACfA,EAAMQ,iBACN,EAAKU,kBAjFU,EAsFnBkD,eAAiB,WACb,IAAIC,EAAS,CACT7E,oBAAqB,EAAKkC,MAAMlC,oBAChC8E,SAAU,EAAK5C,MAAM6C,gBACrBC,eAAgB,EAAK9C,MAAM+C,sBAC3BC,aAAc,EAAKhD,MAAMiD,uBACzBC,OAAQ,EAAKlD,MAAMmD,kBAGvBpC,EAAY4B,GACP3B,MAAK,SAAAC,GAEGA,EAASC,KAAKL,MAWf,EAAKnC,SAAS,CAAE0E,cAAenC,KAT/B0B,EAAOzE,QAAU+C,EAASC,KAAKmC,OAAOrF,IACtC2E,EAAOW,WAAarC,EAASC,KAAKmC,OAAOrF,IACzC2E,EAAO/F,GAAK,EAAKoD,MAAMuD,gBACvBZ,EAAOa,YAAcvC,EAASC,KAAKsC,YAEnC,EAAK9E,SAAS,CAAE+E,WAAW,IAC3B,EAAKzD,MAAMnC,QAAQ6F,KAAKf,GACxB,EAAKgB,mBA3GF,EAkHnBC,cAAgB,WACZ7C,EAAc,EAAKf,MAAM6D,aACpB7C,MAAK,SAAAC,GAEGA,EAASC,KAAKL,MAMf,EAAKnC,SAAS,CAAE0E,cAAenC,KAJ/B,EAAKvC,SAAS,CAAE+E,WAAW,IAE3B,EAAKE,mBA1HF,EAsOnBG,kBAAoB,WAChB,GAAI,EAAK9D,MAAM+D,cAGf,GAAI,EAAK/D,MAAMgE,SACX,EAAKtB,qBACF,CACH,IAAIuB,EAAa,EAAKjE,MAAMnC,QAE3BoG,EAAW,EAAKjE,MAAMuD,iBAAiBX,SAAW,EAAK5C,MAAM6C,gBAC7DoB,EAAW,EAAKjE,MAAMuD,iBAAiBT,eAAiB,EAAK9C,MAAM+C,sBACnEkB,EAAW,EAAKjE,MAAMuD,iBAAiBP,aAAe,EAAKhD,MAAMiD,uBACjEgB,EAAW,EAAKjE,MAAMuD,iBAAiBL,OAAS,EAAKlD,MAAMmD,iBAE5D,EAAKzE,SAAS,CAACmF,YAAa,EAAK7D,MAAMnC,QAAQ,EAAKmC,MAAMuD,iBAAkB1F,QAASoG,IACrF,EAAKL,kBArPM,EAwPnBM,WAAa,WACT,EAAKxF,SAAS,CAAE+E,WAAW,EAAOZ,gBAAiB,GAAIE,sBAAuB,GAAIoB,yBAA0B,GAC5GhB,iBAAkB,GAAIF,uBAAuB,GAAI9D,WAAY,CAACyD,SAAU,OA1PzD,EAiRnBwB,mBAAqB,WACjB,EAAK1F,SAAS,CAAE+E,WAAW,EAAMY,kBAAmB,aAAcL,UAAU,EAAMnB,gBAAiB,GAAIE,sBAAuB,GAAIE,uBAAuB,GAAIE,iBAAiB,MAlR/J,EAoRnBmB,wBAA0B,WACtBC,OAAOC,SAASC,QAAO,IArRR,EA8TnBC,wBAA0B,WACnB,EAAK1E,MAAM2E,kBACV,EAAKjG,SAAS,CAACiG,mBAAmB,IAElC,EAAKjG,SAAS,CAAEiG,mBAAmB,KAlUxB,EAuUnBC,qBAAuB,WACf,EAAK5E,MAAM6E,eACX,EAAKnG,SAAS,CAAEmG,gBAAgB,IAEhC,EAAKnG,SAAS,CAAEmG,gBAAgB,KAzUpC,EAAK7E,MAAQ,CACTb,WAAY,CAAEyD,SAAU,IACxBmB,eAAe,EACfe,SAAS,EACTd,UAAU,EACVH,YAAa,GACbQ,kBAAmB,WACnBd,gBAAiB,EACjBwB,yBAA0B,EAC1BtB,WAAW,EACXuB,YAAY,EACZnH,QAAS,GACToH,yBAA0B,GAC1BC,gBAAiB,GACjBrC,gBAAiB,GACjBsC,mBAAoB,GACpBC,MAAO,CAAC,CAAC/C,KAAM,QAASzF,GAAI,KAAM,CAACyF,KAAM,QAASzF,GAAI,KAAM,CAACyF,KAAM,UAAWzF,GAAI,KAAM,CAACyF,KAAM,SAAUzF,GAAG,MAC5GyI,kBAAmB,GACnBlB,yBAAyB,GACzBpB,sBAAuB,GACvBI,iBAAkB,GAClBF,uBAAwB,GACxBqC,WAAY,GACZC,aAAc,GACdzH,oBAAqB,GACrB0H,wBAAyB,GACzBC,qBAAsB,SACtBC,cAAe,GACfC,aAAc,GACdd,gBAAgB,EAChBF,mBAAmB,EACnBiB,uBAAuB,GAjCZ,E,yDA2CNzF,GACTC,KAAK1B,SAAL,eAAiByB,EAAE3B,OAAO5B,GAAKuD,EAAE3B,OAAOG,U,uCAG1B,IAAD,OACL2B,EAAwBF,KAAKJ,MAAMb,WACnC4E,EAAgB3D,KAAKJ,MAAM+D,cAG/BA,EAAgB3D,KAAKJ,MAAM6C,gBAAgBpC,OAAS,EACpDH,EAAsBsC,SAAWmB,EAAgB,GAAK,wBAGtD3D,KAAK1B,SAAS,CACVS,WAAYmB,EACZyD,cAAeA,IAChB,WACK,EAAKD,yB,iCAQVjD,GACP,OAAyB,IAAjBA,EAAMJ,OAAe,GAAK,c,sCA6DrB,IAAD,OACZM,EAAeX,KAAKJ,MAAMlC,qBACrBkD,MAAK,SAAAC,GACF,GAAKA,EAASC,KAAKL,MA0Bf,EAAKnC,SAAS,CAAE0E,cAAenC,QA1BT,CAItB,IAHA,IAAI4E,EAAO,GACPC,EAAiB7E,EAASC,KAAK6E,gBAAgBF,KAE1CG,EAAI,EAAGA,EAAIF,EAAerF,OAAQuF,IACnCH,EAAKnC,KAAK,CACNxF,QAAS4H,EAAeE,GAAGhI,IAC3BpB,GAAI,EAAKoD,MAAMuD,gBACfX,SAAUkD,EAAeE,GAAGpD,SAC5BE,eAAgBgD,EAAeE,GAAGlD,eAClCE,aAAc8C,EAAeE,GAAGhD,aAChCE,OAAQ4C,EAAeE,GAAG9C,OAC1BM,YAAasC,EAAeE,GAAGxC,cAGvC,EAAK9E,SAAS,CAAE6E,gBAAiB,EAAKvD,MAAMuD,gBAAkB,IAIlE,EAAK7E,SAAS,CAAEb,QAASgI,IACzB,EAAKlC,cAGL,EAAKsC,8BACL,EAAKtC,kBAIVuC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,oCAItBG,GAAe,IAAD,OACxBA,EAAaC,WAAaD,EAAapI,QACvCoI,EAAaxI,oBAAsBsC,KAAKJ,MAAMlC,oBAC9CiD,EAAcuF,GACTtF,MAAK,SAAAC,GAEF,GAAKA,EAASC,KAAKL,MAaf,EAAKnC,SAAS,CAAE0E,cAAenC,QAbT,CAEtB,GAAIA,EAASC,KAAKsF,cAAcC,aAAe,EAAE,CAE5C,IAAMC,EAAQ,EAAK1G,MAAMnC,QAAQ8I,QAAQL,GACrCI,GAAS,GACT,EAAK1G,MAAMnC,QAAQ+I,OAAOF,EAAO,GAErC,EAAKG,qBAGT,EAAKlD,oB,sCASL,IAAD,OACRmD,EAAa1G,KAAKJ,MAAMnC,QAAQuC,KAAKJ,MAAMuD,iBAC5CuD,IACCA,EAAWzE,KAAOjC,KAAKJ,MAAMmE,yBAE7B/D,KAAKJ,MAAMmE,0BACXpD,EAAmB+F,GACd9F,MAAK,SAAA+F,GAAG,OAAI,EAAKC,kBAAkBF,MACnCZ,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,S,wCAMpBtI,GAAU,IAAD,OACvBkD,EAAmBlD,GACdmD,MAAK,SAAA+F,GACc,OAAbA,EAAI7F,MACH,EAAKxC,SAAS,CACVyG,mBAAoB4B,EAAI7F,KAAK+F,YAC7B9C,yBAA0B,QAIrC+B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,uCAGjBe,GAAa,IAAD,OACzBnG,EAAqBmG,GAChBlG,MAAK,SAAA+F,GACF,EAAKC,kBAAkB,EAAKhH,MAAMnC,QAAQ,EAAKmC,MAAMuD,qBAExD2C,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,oCAiCpBG,GACVlG,KAAKyG,qBACLzG,KAAK1B,SAAS,CAAE+E,WAAW,EACvBY,kBAAmB,WACnBd,gBAAiB+C,EAAa1J,GAC9BiG,gBAAiByD,EAAa1D,SAC9BG,sBAAuBuD,EAAaxD,eACpCK,iBAAkBmD,EAAapD,OAC/BD,uBAAwBqD,EAAatD,aACrCgB,UAAU,EACVH,YAAayC,IACjBlG,KAAK4G,kBAAkBV,K,sCAEXA,GACZlG,KAAK+G,cAAcb,K,0CAgBnB,IAFiB,IAAD,OACZc,EAAyB,GACrBpB,EAAG,EAAGA,EAAE5F,KAAKhE,MAAMoI,SAASxE,MAAMqF,kBAAkB5E,OAAQuF,IAChEoB,EAAuB1D,KACnB,CACIrB,KAAMjC,KAAKhE,MAAMoI,SAASxE,MAAMqF,kBAAkBW,GAClDpJ,GAAIoJ,IAKhB5F,KAAK1B,SAAS,CAAEZ,oBAAqBsC,KAAKhE,MAAMoI,SAASxE,MAAMlC,oBAAqB0H,wBAAyBpF,KAAKhE,MAAMoI,SAASxE,MAAMqH,iBACnIhC,kBAAmB+B,EACvB1B,cAAetF,KAAKhE,MAAMoI,SAASxE,MAAM0F,cAAeC,aAAcvF,KAAKhE,MAAMoI,SAASxE,MAAM2F,eAAgB,WAC5G,EAAK2B,qB,oDAMkB,IAAD,OAC1BlH,KAAK1B,SAAS,CAACwG,gBAAiB,KAChC9E,KAAKJ,MAAMnC,QAAQrB,KAAI,SAAA+K,GACnB,OAAO,EAAKvH,MAAMkF,gBAAgBxB,KAAK6D,Q,2CAK3C,IAAK,IAAIvB,EAAI,EAAGA,EAAI5F,KAAKJ,MAAMnC,QAAQ4C,OAAQuF,IAC3C5F,KAAKJ,MAAMnC,QAAQmI,GAAGpJ,GAAKoJ,I,qCAuBpBuB,GAAK,IAAD,OACbA,EAAI/D,YACH+D,EAAI/D,aAAc,EAElB+D,EAAI/D,aAAc,EAGrBpD,KAAK1B,SAAS,CAAEmF,YAAa0D,IAAO,WAChC,EAAK3D,gBACL,EAAKD,mB,+BAIH,IAAD,OA8EL,MAzE8B,KAA1BvD,KAAKJ,MAAMsF,YAAiD,KAA5BlF,KAAKJ,MAAMuF,cAC3CnF,KAAKJ,MAAMkF,gBAAmB,GAC9B9E,KAAKJ,MAAMnC,QAAQrB,KAAI,SAAA+K,GAEpB,IAAIC,GAAyB,EACxBC,GAAuB,EAS/B,OAPI,EAAKzH,MAAMuF,eAAiBgC,EAAIrE,QAAsC,KAA5B,EAAKlD,MAAMuF,eAErDkC,GAAuB,GAExB,EAAKzH,MAAMsF,aAAeiC,EAAIvE,cAA0C,KAA1B,EAAKhD,MAAMsF,aACxDkC,GAAyB,GAEzBC,GAAwBD,IAA2BD,EAAI/D,aAEhDiE,GAAkD,KAA1B,EAAKzH,MAAMsF,aAAsBiC,EAAI/D,aAI/DgE,GAAsD,KAA5B,EAAKxH,MAAMuF,eAAwBgC,EAAI/D,YALnE,EAAKxD,MAAMkF,gBAAgBxB,KAAK6D,QAKlC,OAKLnH,KAAKJ,MAAMkF,gBAAkB,GAC7B9E,KAAKJ,MAAMnC,QAAQrB,KAAI,SAAA+K,GACf,IAAIA,EAAI/D,YACR,OAAO,EAAKxD,MAAMkF,gBAAgBxB,KAAK6D,OAWrB,KAA1BnH,KAAKJ,MAAMsF,YAAiD,KAA5BlF,KAAKJ,MAAMuF,cAC3CnF,KAAKJ,MAAMiF,yBAA2B,GACtC7E,KAAKJ,MAAMnC,QAAQrB,KAAI,SAAA+K,GAEnB,IAAIC,GAAyB,EACzBC,GAAuB,EAS3B,OAPI,EAAKzH,MAAMuF,eAAiBgC,EAAIrE,QAAsC,KAA5B,EAAKlD,MAAMuF,eAErDkC,GAAuB,GAEvB,EAAKzH,MAAMsF,aAAeiC,EAAIvE,cAA0C,KAA1B,EAAKhD,MAAMsF,aACzDkC,GAAyB,GAEzBC,GAAwBD,GAA0BD,EAAI/D,aAE/CiE,GAAkD,KAA1B,EAAKzH,MAAMsF,YAAqBiC,EAAI/D,aAI9DgE,GAAsD,KAA5B,EAAKxH,MAAMuF,cAAuBgC,EAAI/D,YAL9D,EAAKxD,MAAMiF,yBAAyBvB,KAAK6D,QAK/C,OAKTnH,KAAKJ,MAAMiF,yBAA2B,GACtC7E,KAAKJ,MAAMnC,QAAQrB,KAAI,SAAA+K,GACnB,GAAGA,EAAI/D,YACP,OAAO,EAAKxD,MAAMiF,yBAAyBvB,KAAK6D,OAOnD,kBAAC,EAAD,CAAW3K,GAAG,oBAAoBC,MAAM,QACrC,kBAAC,IAAD,CAAMyE,GAAI,CAAEC,SAAU,gBAAiBvB,MAAO,CAAE0F,cAAetF,KAAKJ,MAAM0F,cAAeC,aAAcvF,KAAKJ,MAAM2F,eAAkBtJ,UAAU,gBAAe,kBAAC,EAAD,CAAQO,GAAG,eAAeoF,QAAS5B,KAAKkE,wBAAwB7C,KAAKrB,OAArE,UAA7J,KACA,kBAAC,EAAD,CAAKxD,GAAG,WACJ,kBAAC,EAAD,CAAKN,KAAK,SACN,yBAAKD,UAAU,6BACX,kBAAC,EAAD,CAAWO,GAAG,YAAYC,MAAM,QAC5B,wBAAIR,UAAU,4BAA4BO,GAAG,8BAA8BwD,KAAKJ,MAAMwF,yBACtF,wBAAInJ,UAAU,6BAAd,eAGR,6BACA,6BACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAKC,KAAK,QACL8D,KAAKJ,MAAMqF,kBACZ,6BACA,2BAAOpI,QAAQ,cAAf,aACA,4BAAQ0B,MAAOyB,KAAKJ,MAAMsF,WAAY1D,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAOxD,GAAG,aAAakF,KAAK,cAC/F,4BAAQzF,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,KAC5CyB,KAAKJ,MAAMqF,kBAAkB7I,KAAI,SAAAmL,GAClC,OACI,4BAAQtL,UAAU,gBAAgBqL,KAAK,IAAIE,IAAKD,EAAK/K,GAAI+B,MAAOgJ,EAAKtF,MAAOsF,EAAKtF,WAO7F,IAEJ,kBAAC,EAAD,CAAK/F,KAAK,QACN,2BAAOW,QAAQ,gBAAf,UACA,4BAAQ0B,MAAOyB,KAAKJ,MAAMuF,aAAc3D,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAOxD,GAAG,eAAekF,KAAK,gBACnG,4BAAQzF,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,KACjD,4BAAQtC,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,QAAjD,QACA,4BAAQtC,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,kBAAjD,kBACA,4BAAQtC,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,iBAAjD,mBAGR,kBAAC,EAAD,CAAKrC,KAAK,QACN,kBAAC,IAAD,CAAMgF,GAAG,WAAWjF,UAAU,OAAO,kBAAC,EAAD,uBAEzC,kBAAC,EAAD,CAAKC,KAAK,QACN,kBAAC,EAAD,CAAQyF,KAAK,SAAS1F,UAAU,kBAAkB2F,QAAS5B,KAAKgE,oBAAhE,mBAEJ,kBAAC,EAAD,CAAK9H,KAAK,QACL8D,KAAKJ,MAAM6E,eACR,kBAAC,EAAD,CAAQ9C,KAAK,SAAS1F,UAAU,kBAAkB2F,QAAS5B,KAAKwE,qBAAqBnD,KAAKrB,OAA1F,oBAEA,kBAAC,EAAD,CAAQ2B,KAAK,SAAS1F,UAAU,kBAAkB2F,QAAS5B,KAAKwE,qBAAqBnD,KAAKrB,OAA1F,qBAIR,kBAAC,EAAD,CAAK9D,KAAK,QAEL8D,KAAKJ,MAAM2E,kBACR,kBAAC,EAAD,CAAQ5C,KAAK,SAAS1F,UAAU,kBAAkB2F,QAAS5B,KAAKsE,wBAAwBjD,KAAKrB,OAA7F,uBAEA,kBAAC,EAAD,CAAQ2B,KAAK,SAAS1F,UAAU,kBAAkB2F,QAAS5B,KAAKsE,wBAAwBjD,KAAKrB,OAA7F,yBAMXA,KAAKJ,MAAM6E,eACb,6BACS,wBAAIxI,UAAU,mBAAd,eACC+D,KAAKJ,MAAMnC,QAAQ4C,OAChB,2BAAO7D,GAAG,qBAAqBP,UAAU,wCACrC,2BAAOO,GAAG,oBAAoBP,UAAU,cACpC,4BACI,wBAAIA,UAAU,kBAAkBwL,MAAM,OAAtC,YACA,wBAAIxL,UAAU,kBAAkBwL,MAAM,OAAtC,SACA,wBAAIxL,UAAU,kBAAkBwL,MAAM,OAAtC,iBACA,wBAAIxL,UAAU,kBAAkBwL,MAAM,OAAtC,UACA,wBAAIxL,UAAU,kBAAkBwL,MAAM,QACtC,wBAAIxL,UAAU,kBAAkBwL,MAAM,UAG9C,+BACKzH,KAAKJ,MAAMkF,gBAAgB1I,KAAI,SAAA+K,GAC5B,OACQ,wBAAIlL,UAAU,kBAAkBuL,IAAKL,EAAIrJ,SAC7B,wBAAItB,GAAG,oBAAoBP,UAAU,mBAEjC,2BAAOA,UAAU,wBACb,2BAAO0F,KAAK,WAAW+F,QAASP,EAAI/D,YAAaxB,QAAS,kBAAM,EAAK+F,eAAeR,IAChF5I,MAAO4I,EAAI/D,YAAa5B,SAAU,EAAKC,aAAaJ,KAAK,GAAOK,KAAK,mBAEzE,0BAAMzF,UAAU,gBAGxB,wBAAIO,GAAG,cAAcP,UAAU,mBAAmBkL,EAAI3E,UACtD,wBAAIhG,GAAG,qBAAqBP,UAAU,mBAAmBkL,EAAIvE,cAC7D,wBAAIpG,GAAG,eAAeP,UAAU,mBAAmBkL,EAAIrE,QACvD,wBAAItG,GAAG,aAAaP,UAAU,mBAC1B,kBAAC,EAAD,CAAQ2L,QAAQ,UAAUhG,QAAS,kBAAM,EAAKiG,cAAcV,KAA5D,SAIJ,wBAAI3K,GAAG,eAAeP,UAAU,mBAAhC,IAAmD,kBAAC,EAAD,CAAQ2L,QAAQ,UAAUhG,QAAS,kBAAM,EAAKkG,gBAAgBX,KAA9D,iBASlF,wBAAIlL,UAAU,oBAAd,4BAQb,GAIK+D,KAAKJ,MAAM2E,kBAMZ,6BACI,6BACA,wBAAItI,UAAU,sBAAd,kBACC+D,KAAKJ,MAAMiF,yBAAyBxE,OACjC,6BACA,2BAAO7D,GAAG,qBAAqBP,UAAU,wCACrC,2BAAOO,GAAG,oBAAoBP,UAAU,cACpC,4BACI,wBAAIA,UAAU,kBAAkBwL,MAAM,OAAtC,YACA,wBAAIxL,UAAU,kBAAkBwL,MAAM,OAAtC,SACA,wBAAIxL,UAAU,kBAAkBwL,MAAM,OAAtC,iBACA,wBAAIxL,UAAU,kBAAkBwL,MAAM,OAAtC,YAGR,+BACKzH,KAAKJ,MAAMiF,yBAAyBzI,KAAI,SAAA+K,GACrC,OAEQ,wBAAIlL,UAAU,kBAAkBuL,IAAKL,EAAIrJ,SACrC,wBAAItB,GAAG,oBAAoBP,UAAU,mBAEjC,2BAAOA,UAAU,wBACb,2BAAO0F,KAAK,WAAW+F,QAASP,EAAI/D,YAAaxB,QAAS,kBAAM,EAAK+F,eAAeR,IAChF5I,MAAO4I,EAAI/D,YAAa5B,SAAU,EAAKC,aAAaJ,KAAK,GAAOK,KAAK,mBAEzE,0BAAMzF,UAAU,gBAKxB,wBAAIO,GAAG,cAAcP,UAAU,mBAAmBkL,EAAI3E,UACtD,wBAAIhG,GAAG,qBAAqBP,UAAU,mBAAmBkL,EAAIvE,cAC7D,wBAAIpG,GAAG,eAAeP,UAAU,mBAAmBkL,EAAIrE,eAS9E,wBAAI7G,UAAU,oBAAd,4BAaT,GAEI,6BACI,6BAMZ,kBAAC8L,EAAA,EAAD,CAAOC,KAAMhI,KAAKJ,MAAMyD,UAAW4E,WAAW,GAC1C,kBAACF,EAAA,EAAMG,OAAP,KACI,kBAAC,EAAD,CAAQjM,UAAU,qCAAqCO,GAAG,kBAAkBoF,QAAS,kBAAM,EAAKkC,eAAhG,KACA,kBAACiE,EAAA,EAAMI,MAAP,KAAa,4BAAKnI,KAAKJ,MAAMqE,qBAEjC,kBAAC8D,EAAA,EAAMK,KAAP,KAGI,kBAAC,EAAD,CAAOtL,MAAM,QAAQsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOjD,QAASiD,KAAKJ,MAAM+D,cAAcrC,WAC5FtE,WAAYgD,KAAKJ,MAAMb,WAAWyD,SAAUjE,MAAOyB,KAAKJ,MAAM6C,gBAC9D7F,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWyD,WACpEhG,GAAG,kBAAkBgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAO0B,KAAK,oBAClE,6BACC1B,KAAKJ,MAAMqF,kBACR,6BACI,2BAAOpI,QAAQ,0BAAyB,6CAD5C,IAC8E,6BAC1E,4BAAQC,MAAM,WAAWyB,MAAOyB,KAAKJ,MAAMiD,uBAAwBrB,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAOxD,GAAG,yBAAyBkF,KAAK,0BACxI,4BAAQzF,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,KAChDyB,KAAKJ,MAAMqF,kBAAkB7I,KAAI,SAAAmL,GAC9B,OACI,4BAAQtL,UAAU,gBAAgBqL,KAAK,IAAIE,IAAKD,EAAK/K,GAAI+B,MAAOgJ,EAAKtF,MAAOsF,EAAKtF,WAOjG,GACJ,6BACA,2BAAOpF,QAAQ,oBAAmB,2CAxBtC,KAwBuE,6BACnE,4BAAQC,MAAM,SAASyB,MAAOyB,KAAKJ,MAAMmD,iBAAkBvB,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAOxD,GAAG,mBAAmBkF,KAAK,oBAC1H,4BAAQzF,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,KACjD,4BAAQtC,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,QAAjD,QACA,4BAAQtC,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,kBAAjD,kBACA,4BAAQtC,UAAU,gBAAgBqL,KAAK,IAAI/I,MAAM,iBAAjD,kBAGJ,6BAEA,6BAEA,kBAAC,EAAD,CAAUzB,MAAM,cAAcsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOzB,MAAOyB,KAAKJ,MAAM+C,sBAAuBnG,GAAG,wBAAwBgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAAO0B,KAAK,0BAInL1B,KAAKJ,MAAMgE,SAER,GAAI,6BAEA,6BACC5D,KAAKJ,MAAMmF,mBAAmB1E,OAC3B,kBAAC,EAAD,KACI,yBAAKpE,UAAU,uBACV+D,KAAKJ,MAAMmF,mBAAmB3I,KAAI,SAAA0K,GAC/B,IAAIuB,EAAuB,EAAKC,iBAAiBjH,KAAK,EAAMyF,GAC5D,OACI,6BACI,kBAAC,EAAD,CAAQ7K,UAAU,8CAA8CO,GAAG,mBAAmBoF,QAASyG,GAA/F,OAEA,kBAAC,EAAD,CAAiBb,IAAKV,EAAWlJ,IAAKqE,KAAM,EAAKrC,MAAM0F,cAAgB,IAAM,EAAK1F,MAAM2F,aAAe,KAAOuB,EAAW7E,KAAMC,KAAM4E,EAAWyB,kBAShK,wDAIR,kBAAC,EAAD,CAAOC,YAAY,cACfhM,GAAG,2BACH4E,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAC9BzB,MAAOyB,KAAKJ,MAAMmE,yBAClBvC,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MACjC0B,KAAK,6BAET,kBAAC,EAAD,CAAQzF,UAAU,uBAAuB2F,QAAS,kBAAM,EAAK6G,kBAA7D,kBAUZ,kBAACV,EAAA,EAAMW,OAAP,KACI,kBAAC,EAAD,CAAQd,QAAQ,UAAUhG,QAAS5B,KAAKvB,kBAAxC,mB,GArsBNoD,aCCpB8G,G,wDACF,WAAY3M,GAAQ,IAAD,8BACf,cAAMA,IAwCViC,YAAc,SAACC,GACX,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QAC5C,EAAKC,SAAL,eAAiBH,EAAYD,EAAME,OAAOG,MAAMC,UA3CjC,EAyGnBoK,gCAAkC,SAAA1K,GAC9B,EAAKI,SAAS,CACV+E,WAAW,EACXY,kBAAmB,kBACnB4E,gCAAgC,KA7GrB,EAqHnBC,mBAAqB,WAEjB,IAAIxL,EAAU,CACV6B,SAAU,EAAKS,MAAMmJ,YACrBC,YAAa,EAAKpJ,MAAMqJ,aACxBjI,SAAU,EAAKhF,MAAMgF,SACrBlD,QAAS,EAAK9B,MAAM8B,SAExB6C,EAAmBrD,GACdsD,MAAK,SAAAC,GAEGA,EAASC,KAAKL,MAKf,EAAKnC,SAAS,CAAEmB,mBAAoBoB,EAASC,KAAKL,MAAO1B,WAAY,CAAEgK,YAAa,GAAIG,iBAAkB,GAAIjC,iBAAkB,GAAIkC,eAAgB,GAAI1J,mBAAoB,OAJ5K,EAAKnB,SAAS,CAAEwB,eAAgB,mCAChC,EAAKgE,kBAlIF,EA0InBA,WAAa,WAET,EAAKxF,SAAS,CAAE+E,WAAW,EAAO+F,qBAAqB,EACvDC,uBAAuB,EAAMC,kBAAkB,EAAMC,mBAAmB,EAAMC,mBAAmB,EAC7FC,wBAAyB,GAAIC,sBAAuB,GAAIX,YAAa,GAAIC,YAAa,GAAIW,aAAc,GAAIlK,mBAAmB,GAC/HV,WAAY,CAAEgK,YAAa,GAAIG,iBAAkB,GAAIjC,iBAAkB,GAAIkC,eAAgB,GAAI1J,mBAAoB,GAAI4F,qBAAsB,aA/IlI,EAsKnBuE,oCAAsC,SAAA1L,GAClC,EAAKI,SAAS,CACV+E,WAAW,EACXY,kBAAmB,sBACnB4E,gCAAgC,EAChCgB,0CAA0C,EAC1CC,wCAAwC,EACxCC,iCAAiC,EACjCjK,eAAgB,GAChB4J,sBAAuB,GACvBD,wBAAyB,MAhLd,EAqLnBO,kCAAoC,SAAA9L,GAChC,EAAKI,SAAS,CACV+E,WAAW,EACXY,kBAAmB,oBACnB4E,gCAAgC,EAChCgB,0CAA0C,EAC1CE,iCAAiC,EACjCjK,eAAgB,GAChBgK,wCAAwC,KA7L7B,EAkVnBG,+BAAiC,WAC1B,EAAKrK,MAAMmK,gCAEV,EAAKzL,SAAS,CAACyL,iCAAiC,EAAO1G,WAAW,IAAQ,WAClE,EAAK6G,6BAA6B,EAAKtK,MAAMuK,wBAIrD,EAAK/K,kBA1VM,EA8VnB8E,wBAA0B,WACtBC,OAAOC,SAASC,QAAO,IA7VvB,EAAKzE,MAAQ,CACTZ,UAAU,GACVoL,SAAU,EAAKpO,MAAMoO,SACrBvK,WAAY,KACZgJ,gCAAgC,EAChCgB,0CAA0C,EAC1CC,wCAAwC,EACxCO,wCAAwC,EACxCN,iCAAiC,EACjChL,WAAY,CAAEgK,YAAa,GAAIG,iBAAiB,GAAIjC,iBAAiB,GAAIkC,eAAe,IACxFJ,YAAa,GACbE,aAAc,GACdU,aAAc,GACdF,wBAAyB,GACzBC,sBAAuB,GACvBY,2BAA4B,GAC5BhB,kBAAkB,EAClBiB,uBAAuB,EACvBlB,uBAAuB,EACvBD,qBAAqB,EACrB/F,WAAW,EACXgC,qBAAsB,SACtBvF,eAAgB,GAChBL,mBAAmB,GACnBwE,kBAAmB,GACnBqB,cAAe,GACfC,aAAc,GACd/H,SAAU,GACVgN,cAAe,IA9BJ,E,gEAmCfxK,KAAK1B,SAAS,CAAEgH,cAAetF,KAAKhE,MAAMgD,UAAWuG,aAAcvF,KAAKhE,MAAMiD,WAC9Ee,KAAKyK,+B,mCAWI1K,GACTC,KAAK1B,SAAL,eAAiByB,EAAE3B,OAAO5B,GAAKuD,EAAE3B,OAAOG,U,iCAGjCkC,GACP,OAAyB,IAAjBA,EAAMJ,OAAe,GAAK,c,uCAGpB,IAAD,OACTH,EAAwBF,KAAKJ,MAAMb,WACnCwL,EAAwBvK,KAAKJ,MAAM2K,sBACnClB,EAAyBrJ,KAAKJ,MAAMyJ,sBACpCD,EAAsBpJ,KAAKJ,MAAMwJ,oBAGrCmB,EAAyBvK,KAAKJ,MAAMqJ,eAAiBjJ,KAAKJ,MAAM+J,cAAiB3J,KAAKJ,MAAMqJ,aAAa5I,QAAU,EACnHH,EAAsBgJ,iBAAmB,8EAGzCG,EAAwBrJ,KAAKJ,MAAM6J,wBAAwBpJ,QAAU,EACrEH,EAAsB+G,iBAAmB,wDAGzCmC,EAAsBpJ,KAAKJ,MAAM8J,sBAAsBrJ,QAAU,EACjEH,EAAsBiJ,eAAiB,oDAEvCnJ,KAAK1B,SAAS,CACVS,WAAYmB,EACZqK,sBAAuBA,EACvBnB,oBAAqBA,EACrBC,sBAAuBA,IACxB,WACS,EAAKzJ,MAAMkK,uCAEPV,GACH,EAAKsB,+BAEC,EAAK9K,MAAMiK,yCAEfR,GAAyBD,GACxB,EAAKuB,uBAEF,EAAK/K,MAAMyK,uCAEfhB,GAAyBD,GAExB,EAAKwB,yBAEF,EAAKhL,MAAMiJ,gCAEd0B,GACA,EAAKzB,0B,wDAkDS+B,GAG9B7K,KAAK1B,SAAS,CACV+E,WAAW,EACXY,kBAAmB,oBACnB4F,0CAA0C,EAC1CQ,wCAAwC,EACxCP,wCAAwC,EACxCjB,gCAAgC,EAChCkB,iCAAiC,EACjCjK,eAAgB,GAChBwK,2BAA4BO,EAAsBjN,IAClD6L,wBAAyBoB,EAAsBnJ,KAC/CgI,sBAAuBmB,EAAsB1B,mB,qDA+BtB2B,GAC3B9K,KAAK1B,SAAS,CAAEyL,iCAAiC,EAAM1G,WAAW,EAAM8G,oBAAqBW,EACzF7G,kBAAmB,GACnB4E,gCAAgC,EAChCgB,0CAA0C,EAC1CC,wCAAwC,EACxCzE,qBAAsB,UACtBvF,eAAgB,GAChB4J,sBAAuB,GACvBD,wBAAyB,O,6CAKT,IAAD,OACfnM,EAAU,CACV6B,SAAUa,KAAKJ,MAAMmJ,YACrBC,YAAahJ,KAAKJ,MAAMqJ,aACxBjI,SAAUhB,KAAKhE,MAAMgF,SACrBlD,QAASkC,KAAKhE,MAAM8B,QACpBmJ,iBAAkBjH,KAAKJ,MAAM6J,wBAC7BN,eAAgBnJ,KAAKJ,MAAM8J,sBAC3BpE,cAAetF,KAAKhE,MAAMgD,UAC1BuG,aAAcvF,KAAKhE,MAAMiD,UAG7B0B,EAAyBrD,GACpBsD,MAAK,SAAAC,GAEGA,EAASC,KAAKL,MAOf,EAAKnC,SAAS,CAACmB,mBAAoBoB,EAASC,KAAKL,SANjD,EAAKqD,aACL,EAAK2G,6BACL,EAAKlH,kBAOZuC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,mDAIJ,IAAD,OACrBzI,EAAU,CACV6B,SAAUa,KAAKJ,MAAMmJ,YACrBC,YAAahJ,KAAKJ,MAAMqJ,aACxBjI,SAAUhB,KAAKhE,MAAMgF,SACrBlD,QAASkC,KAAKhE,MAAM8B,SAGxB6C,EAA+BrD,GAC1BsD,MAAK,SAAAC,GAEGA,EAASC,KAAKL,OAGf,EAAKnC,SAAS,CACVkM,cAAe3J,EAASC,KAAK0J,mBAKxC1E,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,qDAGF,IAAD,OACvBzI,EAAU,CACV6B,SAAUa,KAAKJ,MAAMmJ,YACrBC,YAAahJ,KAAKJ,MAAMqJ,aACxBjI,SAAUhB,KAAKhE,MAAMgF,SACrBlD,QAASkC,KAAKhE,MAAM8B,QACpBqL,eAAgBnJ,KAAKJ,MAAM8J,sBAC3BpE,cAAetF,KAAKhE,MAAMgD,UAC1BuG,aAAcvF,KAAKhE,MAAMiD,UAE7B0B,EAAiCrD,GAC5BsD,MAAK,SAAAC,GAEGA,EAASC,KAAKL,MAYf,EAAKnC,SAAS,CAAEmB,mBAAoBoB,EAASC,KAAKL,SAVlD,EAAKnC,SAAS,CACVkM,cAAe3J,EAASC,KAAK0J,cAC7B1K,eAAgB,8CAEpB,EAAKgE,aACL,EAAK2G,6BACL,EAAKlH,kBAOZuC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,mDAGL8E,GAAwB,IAAD,OAC5CE,GAA0B,EAC1B/K,KAAKhE,MAAM8B,UAAY+M,EAAsBG,2BAC7CD,GAA0B,GAE9B,IAAIE,EAAkB,CAClBvN,oBAAqBmN,EAAsBjN,IAC3CsN,YAAalL,KAAKhE,MAAM8B,QACxBC,iBAAkB8M,EAClBE,wBAAyBA,EACzBzF,cAAetF,KAAKJ,MAAM0F,cAC1BC,aAAcvF,KAAKJ,MAAM2F,cAE7B5E,EAA2BsK,GACtBrK,MAAK,SAAA+F,GACF,EAAKrI,SAAS,CAAC6L,oBAAqB,KACpC,EAAKM,6BACL,EAAKlH,iBAERuC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+CAGR,IAAD,OACjBzI,EAAU,CACV6B,SAAUa,KAAKJ,MAAMmJ,YACrBC,YAAahJ,KAAKJ,MAAMqJ,aACxBjI,SAAUhB,KAAKhE,MAAMgF,SACrBlD,QAASkC,KAAKhE,MAAM8B,QACpBJ,oBAAqBsC,KAAKJ,MAAM0K,2BAChCrD,iBAAkBjH,KAAKJ,MAAM6J,wBAC7BN,eAAgBnJ,KAAKJ,MAAM8J,sBAC3BpE,cAAetF,KAAKhE,MAAMgD,UAC1BuG,aAAcvF,KAAKhE,MAAMiD,UAG7B0B,EAA2BrD,GACtBsD,MAAK,SAAAC,GAEGA,EAASC,KAAKL,QACf,EAAKqD,aACL,EAAK2G,6BACL,EAAKlH,kBAIZuC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAoBxB,IAAD,OACL,OACI,kBAAC,EAAD,CAAWvJ,GAAG,oBAAoBC,MAAM,QAEpC,kBAAC,IAAD,CAAMyE,GAAI,CAAEC,SAAU,gBAAiBvB,MAAO,CAAE0F,cAAetF,KAAKJ,MAAM0F,cAAeC,aAAcvF,KAAKJ,MAAM2F,eAAkBtJ,UAAU,gBAAe,kBAAC,EAAD,CAAQO,GAAG,eAAeoF,QAAS5B,KAAKkE,wBAAwB7C,KAAKrB,OAArE,UAA7J,KACA,kBAAC,EAAD,CAAKxD,GAAG,WACJ,kBAAC,EAAD,CAAKN,KAAK,SACN,yBAAKD,UAAU,6BACX,kBAAC,EAAD,CAAWO,GAAG,YAAYC,MAAM,QAC5B,wBAAIR,UAAU,6BAAd,YAAoD+D,KAAKhE,MAAMgD,UAA/D,KACA,wBAAI/C,UAAU,4BAA4BO,GAAG,kBAAkBwD,KAAKJ,MAAME,kBAGlF,kBAAC,EAAD,CAAQ8B,QAAS5B,KAAK4I,gCAAgCvH,KAAKrB,OAA3D,mBACA,kBAAC,EAAD,CAAQ4B,QAAS5B,KAAK4J,oCAAoCvI,KAAKrB,OAA/D,uBACA,kBAAC,EAAD,CAAQ4B,QAAS5B,KAAKgK,kCAAkC3I,KAAKrB,OAA7D,qBACA,6BACA,6BACCA,KAAKJ,MAAM4K,cAAcnK,OAAS,EAC/B,2BAAO7D,GAAG,0BAA0BP,UAAU,wCAC1C,2BAAOO,GAAG,yBAAyBP,UAAU,cACzC,4BACI,wBAAIA,UAAU,uBAAuBwL,MAAM,OAA3C,QACA,wBAAIxL,UAAU,uBAAuBwL,MAAM,OAA3C,mBACA,wBAAIxL,UAAU,uBAAuBwL,MAAM,QAC3C,wBAAIxL,UAAU,uBAAuBwL,MAAM,QAC3C,wBAAIxL,UAAU,uBAAuBwL,MAAM,UAGnD,+BACKzH,KAAKJ,MAAM4K,cAAcpO,KAAI,SAAA0O,GAC1B,OACI,wBAAI7O,UAAU,uBAAuBuL,IAAKsD,EAAalN,KACnD,wBAAIpB,GAAG,yBAAyBP,UAAU,wBAAwB6O,EAAapJ,MAC/E,wBAAIlF,GAAG,uBAAuBP,UAAU,wBAAwB6O,EAAa3B,gBAC7E,wBAAI3M,GAAG,gBAAgBP,UAAU,wBAE7B,kBAAC,IAAD,CAAMiF,GAAI,CAACC,SAAU,YAAavB,MAAO,CAAClC,oBAAqBoN,EAAalN,IAAKqJ,iBAAkB6D,EAAapJ,KAAMuD,kBAAmB6F,EAAa9F,MAAOM,cAAe,EAAK1F,MAAM0F,cAAeC,aAAc,EAAK3F,MAAM2F,eAAgBtJ,UAAU,OAAO,kBAAC,EAAD,oBAEpQ,wBAAIO,GAAG,aAAaP,UAAU,wBACzB,EAAKD,MAAM8B,UAAYgN,EAAaE,yBACjC,kBAAC,EAAD,CAAQpD,QAAQ,UAAUhG,QAAS,kBAAM,EAAKuJ,kCAAkCL,KAAhF,QAEY,IAIpB,wBAAItO,GAAG,eAAeP,UAAU,wBAC3B,EAAKD,MAAM8B,UAAYgN,EAAaE,yBAEjC,kBAAE,EAAF,CAASpD,QAAQ,UAAUhG,QAAS,kBAAM,EAAKwJ,+BAA+BN,KAA9E,UAEA,kBAAC,EAAD,CAAQlD,QAAQ,UAAUhG,QAAS,kBAAM,EAAKwJ,+BAA+BN,KAA7E,gBAU3B,wBAAItO,GAAG,mBAAP,2BACL,6BACA,6BAGA,kBAACuL,EAAA,EAAD,CAAOC,KAAMhI,KAAKJ,MAAMyD,UAAW4E,WAAW,GAC1C,kBAACF,EAAA,EAAMG,OAAP,KACI,kBAACH,EAAA,EAAMI,MAAP,KAAa,4BAAKnI,KAAKJ,MAAMqE,qBAEjC,kBAAC8D,EAAA,EAAMK,KAAP,KAEKpI,KAAKJ,MAAMmK,gCACR,wBAAIvN,GAAG,sBAAP,iBAEA,6BACKwD,KAAKJ,MAAMiJ,+BACR,6BACI,kBAAC,EAAD,CAAOlH,KAAK,WAAW7E,MAAM,eAAesE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MACtEjD,QAASiD,KAAKJ,MAAM0J,iBAAiBhI,WACrCtE,WAAYgD,KAAKJ,MAAMb,WAAWgK,YAClCnM,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWgK,cACpExK,MAAOyB,KAAKJ,MAAMmJ,YAClBvM,GAAG,cACHgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MACjC0B,KAAK,gBAET,kBAAC,EAAD,CAAOC,KAAK,WAAW7E,MAAM,eAAesE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MACtEjD,QAASiD,KAAKJ,MAAM2K,sBAAsBjJ,WAC1CtE,WAAYgD,KAAKJ,MAAMb,WAAWmK,iBAClCtM,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWmK,mBACpE3K,MAAOyB,KAAKJ,MAAMsJ,iBAClB1M,GAAG,eAAegF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MACnD0B,KAAK,iBAET,kBAAC,EAAD,CAAOC,KAAK,WAAW7E,MAAM,uBAAuBsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAAOjD,QAASiD,KAAKJ,MAAM2K,sBAAsBjJ,WAC/HtE,WAAYgD,KAAKJ,MAAMb,WAAWmK,iBAClCtM,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWmK,mBACpE3K,MAAOyB,KAAKJ,MAAM+J,aAClBnN,GAAG,eACHgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MACjC0B,KAAK,kBAIb,6BACK1B,KAAKJ,MAAMkK,uCACR,6BACI,kBAAC,EAAD,CAAOhN,MAAM,yEAAyEsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAChHjD,QAASiD,KAAKJ,MAAMwJ,oBAAoB9H,WACxCtE,WAAYgD,KAAKJ,MAAMb,WAAWoK,eAClCvM,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWoK,iBACpE5K,MAAOyB,KAAKJ,MAAM8J,sBAClBlN,GAAG,wBAAwBgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAC5D0B,KAAK,2BAIb,6BACI,kBAAC,EAAD,CAAO5E,MAAM,oBAAoBsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MAC3DjD,QAASiD,KAAKJ,MAAMyJ,sBAAsB/H,WAC1CtE,WAAYgD,KAAKJ,MAAMb,WAAWkI,iBAClCrK,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWkI,mBACpE1I,MAAOyB,KAAKJ,MAAM6J,wBAClBjN,GAAG,0BACHgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MACjC0B,KAAK,4BAET,kBAAC,EAAD,CAAO5E,MAAM,iDAAiDsE,OAAQpB,KAAK/B,YAAYoD,KAAKrB,MACxFjD,QAASiD,KAAKJ,MAAMwJ,oBAAoB9H,WACxCtE,WAAYgD,KAAKJ,MAAMb,WAAWoK,eAClCvM,eAAc,qBAAgBoD,KAAKuB,WAAWvB,KAAKJ,MAAMb,WAAWoK,iBACpE5K,MAAOyB,KAAKJ,MAAM8J,sBAClBlN,GAAG,wBAAwBgF,SAAUxB,KAAKyB,aAAaJ,KAAKrB,MAC5D0B,KAAK,6BAYjC,0BAAMzF,UAAU,iCAAiC+D,KAAKJ,MAAMH,qBAEhE,kBAACsI,EAAA,EAAMW,OAAP,KACI,kBAAC,EAAD,CAAQd,QAAQ,YAAYhG,QAAS5B,KAAK8D,YAA1C,UAGA,kBAAC,EAAD,CAAQ8D,QAAQ,UAAUhG,QAAS5B,KAAKiK,+BAA+B5I,KAAKrB,OAC3EA,KAAKJ,MAAMyF,+B,GA9ftBxD,cAohBPC,cAAW6G,GCnZX0C,G,wDAhIb,aAAe,IAAD,8BACZ,gBACKzL,MAAQ,CACXwK,UAAU,EACV7C,KAAM,KACNxG,OAAQ,KACR/B,UAAW,KACXC,SAAU,KACVnB,QAAS,KACTqB,SAAU,KACVU,WAAY,KACZJ,mBAAoB,IAEtB,EAAKa,OAAS,EAAKA,OAAOe,KAAZ,gBAbF,E,gEAeO,IAAD,OAClBV,IAAWC,MAAK,SAAAC,GACRA,EAASC,KAAKyG,KAClB,EAAKjJ,SAAS,CACZ8L,UAAU,EACVrJ,OAAQF,EAASC,KAAKyG,KAAK3J,MAG7B,EAAKU,SAAS,CACZ8L,UAAU,EAEV7C,KAAM,Y,6BAMPvG,EAAU7B,GAAW,IAAD,OAKzBwB,EAJe,CACbK,SAAUA,EACV7B,SAAUA,IAITyB,MAAK,SAAAC,GACoB,MAApBA,EAASiC,SACPjC,EAASC,KAAKwK,gBAEhB,EAAKhN,SAAS,CACZ8L,UAAU,EAGVpJ,SAAUH,EAASC,KAAKE,SACxBlD,QAAS+C,EAASC,KAAKhD,QACvBkB,UAAW6B,EAASC,KAAK9B,UACzBC,SAAU4B,EAASC,KAAK7B,SACxBE,SAAU0B,EAASC,KAAK3B,SACxBU,WAAY,aAMd,EAAKvB,SAAS,CACZ8L,UAAU,EACV3K,mBAAoBoB,EAASC,KAAKL,QACjC,WACD,EAAK8C,uB,+BAQP,IAAD,OAEP,OAAIvD,KAAKJ,MAAMwK,SAGX,yBAAKnO,UAAU,OACb,6BAEE,kBAAC,IAAD,CAAUsP,OAAK,EAACrK,GAAI,CAAEC,SAAUnB,KAAKJ,MAAMC,YAAc2L,OAAQ,kBAC/D,kBAAC,EAAD,CACElL,OAAQ,EAAKA,OACbb,mBAAoB,EAAKG,MAAMH,wBAInC,kBAAC,IAAD,CAAO8L,OAAK,EAACE,KAAK,gBAChBD,OAAQ,kBACN,kBAAC,EAAD,CACElL,OAAQ,EAAKA,OACbb,mBAAoB,EAAKG,MAAMH,wBAErC,kBAAC,IAAD,CAAO8L,OAAK,EAACE,KAAK,YAAYC,UAAWC,IACzC,kBAAC,IAAD,CAAOJ,OAAK,EAACE,KAAK,WAAWD,OAAQ,kBAAM,kBAAC,EAAD,CAASpB,SAAU,EAAKxK,MAAMwK,SAAUpJ,SAAU,EAAKpB,MAAMoB,SAAUlD,QAAS,EAAK8B,MAAM9B,QAASkB,UAAW,EAAKY,MAAMZ,UAAWC,SAAU,EAAKW,MAAMX,cAErM,kBAAC,IAAD,CAAOsM,OAAK,EAACE,KAAK,IAAID,OAAQ,kBAC5B,kBAAC,IAAD,CAAUtK,GAAG,uBAYrB,yBAAKjF,UAAU,OACb,6BACE,kBAAC,IAAD,CAAOsP,OAAK,EAACE,KAAK,gBAChBD,OAAQ,kBACN,kBAAC,EAAD,CACElL,OAAQ,EAAKA,OACbb,mBAAoB,EAAKG,MAAMH,wBAGrC,kBAAC,IAAD,CAAO8L,OAAK,EAACE,KAAK,IAAID,OAAQ,kBAC5B,kBAAC,IAAD,CAAUtK,GAAG,qBAGf,kBAAC,IAAD,CAAU0K,KAAK,IAAI1K,GAAG,wB,GA1HdW,cCJlBgK,IAASL,OACR,kBAAC,IAAD,KACE,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOE,UAAWL,MAIpBS,SAASC,eAAe,W","file":"static/js/main.baac4275.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Col = props =>\n  <div className={props.size.split(\" \").map(size => \"col-\" + size).join(\" \")} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Container = props =>\n  <div id={props.id} className={`container${props.fluid === \"true\"  ? \"-fluid\" : \"\"}`} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n//({ fluid, children, props })\nexport const Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props}> \n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Input = props =>\n  <div className={props.formgroupclass}>\n\n    <label htmlFor=\"inputField\">{props.label}</label>\n    <input className=\"form-control\" id=\"inputField\" {...props} />\n    {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\n  </div>;\n","import React from \"react\";\n\nexport const Button = props =>\n  <button {...props} className=\"btn btn-pill btn-light btn-lg\">\n    {props.children}\n  </button>;\n","import React from \"react\";\r\n\r\nexport const TextArea = props =>\r\n    <div className={props.formgroupclass}>\r\n        <label htmlFor=\"bugDescriptionField\">{props.label}</label>\r\n        <textarea className=\"form-control\" id=\"bugDescriptionField\" rows=\"5\" {...props}></textarea>\r\n        {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\r\n    </div>;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    // USER CALLS TO DB -----\r\n    user: function () {\r\n        return axios.get(\"/api/user\");\r\n    },\r\n    sendForgotPasswordEmail(userObj) {\r\n        return axios.post(\"/api/user/sendForgotPasswordEmail\", userObj);\r\n    },\r\n    updateUserInDB(userObj){\r\n        return axios.post(\"/api/user/updateUser\", userObj);\r\n    },\r\n    login: function (userData) {\r\n        return axios.post(\"/api/user/login\", userData)\r\n    },\r\n    saveUser: function (userData) {\r\n        return axios.post(\"/api/user/saveUser\", userData);\r\n    },\r\n\r\n    //BUG CALLS TO DB --------\r\n    saveBug: function (bugData) {\r\n        return axios.post(\"/api/bug/saveBug\", bugData);\r\n    },\r\n    updateBug: function (bugData) {\r\n        return axios.post(\"/api/bug/updateBug\", bugData);\r\n    },\r\n    deleteBug: function (bugData) {\r\n        return axios.post(\"/api/bug/deleteBug\", bugData);\r\n    },\r\n    getAllBugs: function (organizationMongoID) {\r\n        return axios.get(\"/api/bug/getAllBugs/\" + organizationMongoID);\r\n    },\r\n    \r\n\r\n    // BUG COMMENT CALLS  TO DB -------\r\n    deleteBugComment: function (bugCommentData) {\r\n        return axios.post(\"/api/bug/deleteBugComment/\" + bugCommentData._id);\r\n    },\r\n    saveBugComment: function(bugAndCommentData) {\r\n        return axios.post(\"/api/bug/saveBugComment\", bugAndCommentData);\r\n    },\r\n    getBugComments: function(bugData) {\r\n        return axios.get(\"/api/bug/getBugComments/\" + bugData.mongoID);\r\n    },\r\n\r\n    // ORGANIZATION CALLS TO DB ------\r\n    saveOrganizationInDB: function(userData) {\r\n        return axios.post(\"/api/organization/saveOrganization\", userData);\r\n    },\r\n    getOrganizationsOfUserInDB: function(userData){\r\n        return axios.get(\"/api/organization/getAllOrganizationsOfUser/\" + userData.mongoID);\r\n    },\r\n    attachUserToOrganizationInDB: function (userData) {\r\n        return axios.post(\"/api/organization/attachUserToOrganization\", userData);\r\n    },\r\n    deleteOrganizationInDB: function(organizationData){\r\n        return axios.post(\"/api/organization/deleteOrganization\", organizationData);\r\n    },\r\n    updateOrganizationInDB: function(userData){\r\n        return axios.post(\"/api/organization/updateOrganization\", userData)\r\n    }\r\n\r\n};","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport { withRouter } from 'react-router';\r\n\r\nimport \"./landing-page.css\";\r\nclass LandingPage extends Component {\r\n    constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        emailAddress: \"\",\r\n        password: \"\",\r\n        formErrors: {firstName: \"\", lastName: \"\", emailAddress:\"\", password:\"\"},\r\n          redirectTo: null,\r\n        firstNameValid: false,\r\n        lastNameValid: false,\r\n        passwordValid: false,\r\n        emailAddressValid: false,\r\n        loginOrCreateAccountButtonClicked: false,\r\n        loginButtonClicked: true,\r\n        forgotPasswordButtonClicked: false,\r\n        successMessage: \"\",\r\n        serverErrorMessage: \"\"\r\n    };\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    } \r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ serverErrorMessage: this.props.serverErrorMessage });\r\n    }\r\n    //We use this method for validating all the fields.\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let emailAddressValid = this.state.emailAddressValid;\r\n        let firstNameValid = this.state.firstNameValid;\r\n        let lastNameValid = this.state.lastNameValid;\r\n        let passwordValid = this.state.passwordValid;\r\n\r\n        //Validating email using Regex\r\n        let regex = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\r\n         emailAddressValid = new RegExp(regex).test(this.state.emailAddress);\r\n        \r\n        fieldValidationErrors.emailAddress = emailAddressValid ? \"\" : \"Please provide a valid email\";\r\n\r\n        //Validating First Name by checking if there is anything there.\r\n        firstNameValid = this.state.firstName.length > 0;\r\n        fieldValidationErrors.firstName = firstNameValid ? \"\": \"Please provide your first name\";\r\n\r\n        //Validating Last Name by checking if there is anything there.\r\n        lastNameValid = this.state.lastName.length > 0;\r\n        fieldValidationErrors.lastName = lastNameValid ? \"\":\"Please provide your last name\";\r\n\r\n\r\n        if (!this.state.loginButtonClicked)\r\n        {\r\n        //validating password\r\n        passwordValid = this.state.password.length >= 6;\r\n        fieldValidationErrors.password = passwordValid ? \"\" : \"Please provide a password of atleast 8 characters\";\r\n        }\r\n\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            emailAddressValid: emailAddressValid,\r\n            firstNameValid: firstNameValid,\r\n            lastNameValid: lastNameValid,\r\n            passwordValid: passwordValid\r\n        }, () => {\r\n            if(this.state.loginButtonClicked && emailAddressValid){\r\n                //If the login button is clicked then we want submit LOGIN request, which is different than Create Account request\r\n                this.props._login(this.state.emailAddress, this.state.password);\r\n\r\n            }else if(this.state.loginOrCreateAccountButtonClicked && !this.state.loginButtonClicked && emailAddressValid && firstNameValid && lastNameValid && passwordValid){\r\n                //If Create Account button was clicked, then we want to post the user to the database.\r\n                this.saveUser();\r\n            }else if(this.state.forgotPasswordButtonClicked){\r\n                //If forgot password button was clicked.\r\n                this.sendForgotPasswordEmail();\r\n            }\r\n        });    \r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Below are all the button click methods - Just to set it up so before I actually submit data to DB ----------------------------------\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\" }\r\n        }, () => {\r\n                this.validateFields();\r\n        });\r\n\r\n    };\r\n\r\n    handleLoginButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: true, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }\r\n        })\r\n        \r\n    }\r\n    handleCreateAccountButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: false, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }        \r\n        })\r\n    }\r\n\r\n    handleForgotPasswordButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: false, loginButtonClicked: false, forgotPasswordButtonClicked: true,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n                        formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage:\"\" }       \r\n        })\r\n    }\r\n    // END of BUTTON CLICK METHODS\r\n\r\n    //Handle the call to the DB for forgot password\r\n    sendForgotPasswordEmail() {\r\n        let userObj = {\r\n            email: this.state.emailAddress\r\n        }\r\n\r\n        API.sendForgotPasswordEmail(userObj)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    this.setState({ serverErrorMessage: \"An email has been sent.\"});\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error })\r\n                }\r\n            })\r\n    }\r\n\r\n    //Method when user wants to create account\r\n    saveUser() {\r\n            let userObj = {\r\n                userId: null,\r\n                username: this.state.emailAddress,\r\n                password: this.state.password,\r\n                email: this.state.emailAddress,\r\n                user_email: this.state.email,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName\r\n            }\r\n            API.saveUser(userObj)\r\n                .then(response => {\r\n\r\n\r\n\r\n                    if (!response.data.error) {\r\n                        //Now that the user account is created, let's automatically login the user in\r\n                         this.props._login(this.state.emailAddress, this.state.password, userObj);\r\n\r\n        \r\n                    } else {\r\n                        //Usually this happens when an email address was already used.\r\n                        this.setState({ serverErrorMessage: response.data.error })\r\n                    }\r\n                })\r\n\r\n    }\r\n    render() {\r\n\r\n        if (this.props.redirectTo) {\r\n            return <Redirect to={{ pathname: this.props.redirectTo }} />\r\n        } else {\r\n        return (\r\n            <Container id=\"container\" fluid=\"true\">\r\n\r\n                <Row id=\"mainRow\">\r\n\r\n                    <hr id=\"hline\"></hr>\r\n                    <Col id=\"formCol\" size=\"sm-6\">\r\n                        <h1 id=\"loginBugSlayerTitle\">BugSlayer</h1>\r\n                        {this.state.loginOrCreateAccountButtonClicked ?\r\n                            <div>\r\n                                {this.state.loginButtonClicked ?\r\n                                    <h3 id=\"formHeader\">Login</h3>\r\n                                    :\r\n                                    <h3 id=\"formHeader\">Create Account</h3>\r\n\r\n                                }\r\n                                <form>\r\n                                    \r\n\r\n                                    {this.state.loginButtonClicked ?\r\n\r\n                                        \"\"\r\n                                        :\r\n\r\n                                        <div>\r\n                                           \r\n                                            <Input label=\"First Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.firstNameValid.toString()} fielderror={this.state.formErrors.firstName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.firstName)}`} value={this.state.firstName} id=\"firstName\" onChange={this.handleChange.bind(this)} name=\"firstName\"></Input>\r\n\r\n\r\n                                    \r\n                                            <Input label=\"Last Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.lastNameValid.toString()} fielderror={this.state.formErrors.lastName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.lastName)}`} value={this.state.lastName} id=\"lastName\" onChange={this.handleChange.bind(this)} name=\"lastName\"></Input>\r\n\r\n                                        </div>\r\n\r\n                                    }\r\n\r\n                               \r\n                                    <Input label=\"Email Address\" onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n\r\n                              \r\n                                    <Input label=\"Password\" type=\"password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.passwordValid.toString()} fielderror={this.state.formErrors.password} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.password)}`} value={this.state.password} id=\"password\" onChange={this.handleChange.bind(this)} name=\"password\"></Input>\r\n\r\n                                    <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n\r\n                                    {this.state.loginButtonClicked ?\r\n                                        <div>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" \r\n                                            onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n\r\n                                    }\r\n                                </form>\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                                <br />\r\n                            </div>\r\n                            : \r\n\r\n                            <div>\r\n\r\n                                {\r\n                                    this.state.forgotPasswordButtonClicked ?\r\n                                        <div>\r\n\r\n                                            <p><strong>Please enter your email address. If correct, we will send you an email!</strong></p>\r\n                                            <p>Email Address</p>\r\n                                            <Input onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n                                            <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n                                            \r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                        </div>\r\n                                            :                                                                                \r\n                                             <div>                                \r\n                                            <Button onClick={this.handleLoginButtonClick.bind(this)}> Login </Button>\r\n                                            <Button onClick={this.handleCreateAccountButtonClick.bind(this)}> Create Account </Button>\r\n                                            <Button onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</Button>      \r\n                                            </div>\r\n\r\n\r\n                                }\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n\r\n                            </div>\r\n                              \r\n                        }\r\n                        \r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n                }\r\n    \r\n            }\r\n}\r\n\r\n// export default LandingPage;\r\nexport default withRouter(LandingPage)\r\n","import React from \"react\";\r\n\r\n\r\nexport const BugCommentContainer = ({ children }) => (\r\n    <div id=\"wrapper\">\r\n        <div id=\"bugs\">\r\n            {children}\r\n        </div>\r\n        <div id=\"bugComments\"></div>\r\n    </div>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const BugCommentPanel = props => (\r\n    <div className='panel panel-default'>\r\n        <div className='panel-body note-panel'>\r\n            <p className=\"comment-text\"> {props.text} </p>\r\n            {props.children}\r\n            <p className=\"date-text\">{props.date}</p>\r\n        </div>\r\n    </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport {BugCommentContainer, BugCommentPanel } from \"../../components/BugCommentContainer\";\r\nimport API from \"../../utils/API\";\r\nimport \"./bug-view.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nclass BugViewPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formErrors: { bugTitle: \"\" },\r\n            bugTitleValid: false,\r\n            isLogin: true,\r\n            isNewBug: false,\r\n            selectedBug: \"\",\r\n            currentModalTitle: \"Edit Bug\",\r\n            currentBugIndex: 0,\r\n            currentCompletedBugIndex: 0,\r\n            showModal: false,\r\n            showModal2: false,\r\n            bugData: [],\r\n            filteredCompletedBugData: [],\r\n            filteredBugData: [],\r\n            bugTitleInModal: \"\",\r\n            bugCommentsInModal: [],\r\n            users: [{text: 'Tyler', id: '1'}, {text: 'Tawny', id: '2'}, {text: 'Anthony', id: '3'}, {text: 'Arthur', id:'4'}],\r\n            organizationUsers: [],\r\n            currentBugCommentInModal:\"\",\r\n            bugDescriptionInModal: \"\",\r\n            bugStatusInModal: \"\",\r\n            bugUserAssignedInModal: \"\",\r\n            userFilter: \"\",\r\n            statusFilter: \"\",\r\n            organizationMongoID: \"\",\r\n            organizationNameInTitle: \"\",\r\n            formSubmitButtonText: \"Submit\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            showActiveBugs: true,\r\n            showCompletedBugs: false,\r\n            isCurrentBugCompleted: false\r\n        };\r\n\r\n    }\r\n\r\n    delta = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        });\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n    //This method will handle all the form validation\r\n    validateFields() {   \r\n            let fieldValidationErrors = this.state.formErrors;\r\n            let bugTitleValid = this.state.bugTitleValid;\r\n\r\n\r\n            bugTitleValid = this.state.bugTitleInModal.length > 0;\r\n            fieldValidationErrors.bugTitle = bugTitleValid ? \"\" : \"Please add Bug Title.\";\r\n\r\n\r\n            this.setState({\r\n                formErrors: fieldValidationErrors,\r\n                bugTitleValid: bugTitleValid\r\n            }, () => {\r\n                    this.updateOrCreateBug();\r\n            });\r\n        \r\n\r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n    };\r\n\r\n\r\n    //************************** DB METHODS ************** THESE METHODS SAVE, EDIT, GET BUGS FROM DB *******************************************\r\n    saveNewBugInDB = () => {\r\n        var bugObj = {\r\n            organizationMongoID: this.state.organizationMongoID,\r\n            bugTitle: this.state.bugTitleInModal,\r\n            bugDescription: this.state.bugDescriptionInModal,\r\n            userAssigned: this.state.bugUserAssignedInModal,\r\n            status: this.state.bugStatusInModal\r\n        }\r\n\r\n        API.saveBug(bugObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    bugObj.mongoID = response.data.bugDoc._id;\r\n                    bugObj.newMongoID = response.data.bugDoc._id;\r\n                    bugObj.id = this.state.currentBugIndex;\r\n                    bugObj.isCompleted = response.data.isCompleted;\r\n\r\n                    this.setState({ showModal: false });\r\n                    this.state.bugData.push(bugObj);\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n    updateBugInDB = () => {\r\n        API.updateBug(this.state.selectedBug)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    this.setState({ showModal: false });\r\n\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    getBugsFromDB() {\r\n        API.getAllBugs(this.state.organizationMongoID)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    var bugs = [];\r\n                    var bugArrayFromDB = response.data.organizationDoc.bugs;\r\n                    //Loop through bug data received from the server.\r\n                    for (var i = 0; i < bugArrayFromDB.length; i++) {\r\n                            bugs.push({\r\n                                mongoID: bugArrayFromDB[i]._id,\r\n                                id: this.state.currentBugIndex,\r\n                                bugTitle: bugArrayFromDB[i].bugTitle,\r\n                                bugDescription: bugArrayFromDB[i].bugDescription,\r\n                                userAssigned: bugArrayFromDB[i].userAssigned,\r\n                                status: bugArrayFromDB[i].status,\r\n                                isCompleted: bugArrayFromDB[i].isCompleted\r\n                            })\r\n\r\n                        this.setState({ currentBugIndex: this.state.currentBugIndex + 1});\r\n\r\n                   }\r\n\r\n                    this.setState({ bugData: bugs});\r\n                    this.forceUpdate();\r\n\r\n                    //At default, we want to show all bugs in the table\r\n                    this.putAllBugsIntoFilteredArray();\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    deleteBugInDB(bugClickedOn) {\r\n        bugClickedOn.bugMongoID = bugClickedOn.mongoID;\r\n        bugClickedOn.organizationMongoID = this.state.organizationMongoID;\r\n        API.deleteBug(bugClickedOn)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    if (response.data.deletedBugDoc.deletedCount > 0){\r\n                         //Removing the bug from the UI\r\n                         const index = this.state.bugData.indexOf(bugClickedOn);\r\n                         if (index > -1) {\r\n                             this.state.bugData.splice(index, 1);\r\n                         }\r\n                         this.adjustBugDataOrder();\r\n                     }\r\n\r\n                     this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    // Below methods are related to bug comments\r\n    addBugComment() {\r\n        let currentBug = this.state.bugData[this.state.currentBugIndex];\r\n        if(currentBug){\r\n            currentBug.text = this.state.currentBugCommentInModal;\r\n       \r\n        if (this.state.currentBugCommentInModal) {\r\n            API.saveBugComment(currentBug)\r\n                .then(res => this.renderBugComments(currentBug))\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n         }\r\n\r\n    };\r\n    renderBugComments(bugData) {\r\n        API.getBugComments(bugData)\r\n            .then(res => {\r\n                if(res.data !== null){\r\n                    this.setState({\r\n                        bugCommentsInModal: res.data.bugComments,\r\n                        currentBugCommentInModal: \"\"\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    deleteBugComment(bugComment) {\r\n        API.deleteBugComment(bugComment)\r\n            .then(res => {\r\n                this.renderBugComments(this.state.bugData[this.state.currentBugIndex]);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n    // ****************** END OF DB METHODS*******************************************\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updateOrCreateBug = () => {\r\n        if(!this.state.bugTitleValid){\r\n            return;\r\n        }\r\n        if (this.state.isNewBug){\r\n            this.saveNewBugInDB();\r\n        } else {\r\n            var newBugData = this.state.bugData;\r\n            //UPDATE THE BUG DATA LOCALLY BEFORE PUSHING TO DB\r\n             newBugData[this.state.currentBugIndex].bugTitle = this.state.bugTitleInModal;\r\n             newBugData[this.state.currentBugIndex].bugDescription = this.state.bugDescriptionInModal;\r\n             newBugData[this.state.currentBugIndex].userAssigned = this.state.bugUserAssignedInModal;\r\n             newBugData[this.state.currentBugIndex].status = this.state.bugStatusInModal;\r\n\r\n            this.setState({selectedBug: this.state.bugData[this.state.currentBugIndex], bugData: newBugData});\r\n            this.updateBugInDB();\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        this.setState({ showModal: false, bugTitleInModal: \"\", bugDescriptionInModal: \"\", currentBugCommentInModal: \"\", \r\n        bugStatusInModal: \"\", bugUserAssignedInModal:\"\", formErrors: {bugTitle: \"\"} });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n\r\n    // ******************** THESE METHODS ARE CALLED WHEN CREATE/EDIT BUTTONS ARE FIRST CLICKED ******************\r\n    editBugButton(bugClickedOn) {\r\n        this.adjustBugDataOrder()\r\n        this.setState({ showModal: true, \r\n            currentModalTitle: \"Edit Bug\",\r\n            currentBugIndex: bugClickedOn.id,\r\n            bugTitleInModal: bugClickedOn.bugTitle, \r\n            bugDescriptionInModal: bugClickedOn.bugDescription, \r\n            bugStatusInModal: bugClickedOn.status,\r\n            bugUserAssignedInModal: bugClickedOn.userAssigned,\r\n            isNewBug: false, \r\n            selectedBug: bugClickedOn });\r\n        this.renderBugComments(bugClickedOn);\r\n    }\r\n    deleteBugButton(bugClickedOn){ \r\n        this.deleteBugInDB(bugClickedOn);\r\n    }\r\n\r\n    createNewBugButton = () => {\r\n        this.setState({ showModal: true, currentModalTitle: \"Create Bug\", isNewBug: true, bugTitleInModal: \"\", bugDescriptionInModal: \"\", bugUserAssignedInModal:\"\", bugStatusInModal:\"\" });\r\n    }\r\n    handleLogoutButtonClick = () => {\r\n        window.location.reload(false);\r\n    }\r\n    // ******************** END OF INITIAL BUTTON CLICK METHODS ******************\r\n\r\n\r\n\r\n    //CALLS THIS WHEN THE COMPONENT MOUNTS, basically \"on page load\"\r\n    componentDidMount() {\r\n        var organizationUsersArray = [];\r\n        for(var i =0; i<this.props.location.state.organizationUsers.length; i++){\r\n            organizationUsersArray.push(\r\n                {\r\n                    text: this.props.location.state.organizationUsers[i],\r\n                    id: i\r\n                }\r\n            )\r\n        }\r\n        //Grab props that were set from profile page and set them to state for easier access.\r\n        this.setState({ organizationMongoID: this.props.location.state.organizationMongoID, organizationNameInTitle: this.props.location.state.organizationName,\r\n            organizationUsers: organizationUsersArray,\r\n        userFirstName: this.props.location.state.userFirstName, userLastName: this.props.location.state.userLastName }, () => {\r\n            this.getBugsFromDB();\r\n        });\r\n\r\n        \r\n    } \r\n\r\n    putAllBugsIntoFilteredArray() {\r\n        this.setState({filteredBugData: []});\r\n        this.state.bugData.map(bug => {\r\n            return this.state.filteredBugData.push(bug);\r\n        });\r\n    }\r\n    adjustBugDataOrder() {\r\n        //Update the current page's id of the bug for UI purposes\r\n        for (var i = 0; i < this.state.bugData.length; i++) {\r\n            this.state.bugData[i].id = i;\r\n        }\r\n    }\r\n\r\n    //If you click \"Show Completed Bugs\" or \"Hide Completed Bugs\", this will show or hide.\r\n    swapRenderCompletedBugs = () => {\r\n        if(this.state.showCompletedBugs){\r\n            this.setState({showCompletedBugs: false})\r\n        }else {\r\n            this.setState({ showCompletedBugs: true })\r\n        }\r\n        \r\n    }\r\n    //If you click \"Show Active Bugs\" or \"Hide Active Bugs\", this will show or hide.\r\n    swapRenderActiveBugs = () => {\r\n        if (this.state.showActiveBugs) {\r\n            this.setState({ showActiveBugs: false })\r\n        } else {\r\n            this.setState({ showActiveBugs: true })\r\n        }\r\n    }\r\n\r\n    //Flip the value of \"isCompleted\" for the bug\r\n    completedCheck(bug){\r\n       if(bug.isCompleted){\r\n           bug.isCompleted = false;\r\n       }else {\r\n           bug.isCompleted = true;\r\n       }\r\n\r\n        this.setState({ selectedBug: bug }, () => {\r\n            this.updateBugInDB();\r\n            this.forceUpdate();\r\n        });\r\n\r\n    }\r\n    render() {\r\n\r\n\r\n\r\n        //FIRST WE FILTER THE NON COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\"){\r\n            this.state.filteredBugData  = [];\r\n            this.state.bugData.map(bug => {\r\n                \r\n               var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n            if (this.state.statusFilter === bug.status && this.state.statusFilter !== \"\")  {\r\n\r\n                statusFilterIsActive = true;\r\n            }          \r\n            if(this.state.userFilter === bug.userAssigned && this.state.userFilter !== \"\") {\r\n                assigneeFilterIsActive = true;\r\n            }\r\n            if (statusFilterIsActive && assigneeFilterIsActive && !bug.isCompleted){\r\n            return this.state.filteredBugData.push(bug);\r\n            } else if (statusFilterIsActive && this.state.userFilter === \"\" && !bug.isCompleted){\r\n                \r\n                return this.state.filteredBugData.push(bug);\r\n            }\r\n            else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && !bug.isCompleted) {\r\n                return this.state.filteredBugData.push(bug);\r\n            }\r\n        });\r\n          } else {\r\n            this.state.filteredBugData = [];\r\n            this.state.bugData.map(bug => {\r\n                    if(!bug.isCompleted){\r\n                    return this.state.filteredBugData.push(bug);\r\n                    }\r\n\r\n            });\r\n\r\n          }\r\n\r\n\r\n\r\n\r\n          // NOW WE WILL DO THE SAME LOGIC FOR COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\") {\r\n            this.state.filteredCompletedBugData = [];\r\n            this.state.bugData.map(bug => {\r\n\r\n                var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n                if (this.state.statusFilter === bug.status && this.state.statusFilter !== \"\") {\r\n\r\n                    statusFilterIsActive = true;\r\n                }\r\n                if (this.state.userFilter === bug.userAssigned && this.state.userFilter !== \"\") {\r\n                    assigneeFilterIsActive = true;\r\n                }\r\n                if (statusFilterIsActive && assigneeFilterIsActive && bug.isCompleted) {\r\n                    return this.state.filteredCompletedBugData.push(bug);\r\n                } else if (statusFilterIsActive && this.state.userFilter === \"\" && bug.isCompleted) {\r\n\r\n                    return this.state.filteredCompletedBugData.push(bug);\r\n                }\r\n                else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && bug.isCompleted) {\r\n                    return this.state.filteredCompletedBugData.push(bug);\r\n                }\r\n            });\r\n        } else {\r\n            this.state.filteredCompletedBugData = [];\r\n            this.state.bugData.map(bug => {\r\n                if(bug.isCompleted){\r\n                return this.state.filteredCompletedBugData.push(bug);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n        return (\r\n             <Container id=\"containerViewBugs\" fluid=\"true\">\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 BugtrackerTitle\" id=\"organizationNameInBugTitle\">{this.state.organizationNameInTitle}</h1>\r\n                                <h2 className=\"display-4 BugTrackerTitle\">View Bugs</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                        <Row>\r\n                            <Col size=\"sm-1\">\r\n                                {this.state.organizationUsers ?\r\n                                <div>\r\n                                <label htmlFor=\"userFilter\">Assignee </label>\r\n                                <select value={this.state.userFilter} onChange={this.handleChange.bind(this)} id=\"userFilter\" name=\"userFilter\">\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                        {this.state.organizationUsers.map(user => {\r\n                                        return (\r\n                                            <option className=\"dropdown-item\" href=\"#\" key={user.id} value={user.text}>{user.text}</option>\r\n                                              )\r\n                                        })\r\n                                     }\r\n                                </select>\r\n                                    </div>\r\n                                : \r\n                                \"\"}\r\n                            </Col>\r\n                            <Col size=\"sm-1\">\r\n                                <label htmlFor=\"statusFilter\">Status</label>\r\n                                <select value={this.state.statusFilter} onChange={this.handleChange.bind(this)} id=\"statusFilter\" name=\"statusFilter\">\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Open\">Open</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"In Development\">In Development</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Needs Testing\">Needs Testing</option>\r\n                                </select>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                <Link to=\"/profile\" className=\"log\" ><Button>View Profile</Button></Link>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                <Button type=\"button\" className=\"btn btn-primary\" onClick={this.createNewBugButton}>Create New Bug</Button>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                {this.state.showActiveBugs ?\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderActiveBugs.bind(this)}>Hide Active Bugs</Button>\r\n                                    :\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderActiveBugs.bind(this)}>Show Active Bugs</Button>\r\n                                }\r\n                                \r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                \r\n                                {this.state.showCompletedBugs ?\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderCompletedBugs.bind(this)}>Hide Completed Bugs</Button>\r\n                                    :\r\n                                    <Button type=\"button\" className=\"btn btn-primary\" onClick={this.swapRenderCompletedBugs.bind(this)}>Show Completed Bugs</Button>\r\n                                }\r\n                            </Col>\r\n                                       \r\n                        </Row>\r\n\r\n                        {this.state.showActiveBugs ?                   \r\n                       <div>\r\n                                <h1 className=\"activeBugsTitle\">Active Bugs</h1>\r\n                                {this.state.bugData.length ? (\r\n                                    <table id=\"bugViewTable_Table\" className=\"table table-hover bugViewTable_Table\">\r\n                                        <thead id=\"bugViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Complete</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Title</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">User Assigned</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Status</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\"></th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\"></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.filteredBugData.map(bug => {\r\n                                                return (\r\n                                                        <tr className=\"bugViewTable_tr\" key={bug.mongoID}>\r\n                                                                    <td id=\"isCompletedColumn\" className=\"bugViewTable_td\">\r\n\r\n                                                                        <label className=\"isCompletedContainer\">\r\n                                                                            <input type=\"checkbox\" checked={bug.isCompleted} onClick={() => this.completedCheck(bug)}\r\n                                                                                value={bug.isCompleted} onChange={this.handleChange.bind(this)} name=\"bugIsCompleted\"\r\n                                                                            />\r\n                                                                            <span className=\"checkmark\"></span>\r\n                                                                        </label>\r\n                                                                    </td>\r\n                                                                    <td id=\"titleColumn\" className=\"bugViewTable_td\">{bug.bugTitle}</td>\r\n                                                                    <td id=\"userAssignedColumn\" className=\"bugViewTable_td\">{bug.userAssigned}</td>\r\n                                                                    <td id=\"statusColumn\" className=\"bugViewTable_td\">{bug.status}</td>\r\n                                                                    <td id=\"editColumn\" className=\"bugViewTable_td\">\r\n                                                                        <Button variant=\"primary\" onClick={() => this.editBugButton(bug)}>\r\n                                                                            Edit\r\n                                                                        </Button>\r\n                                                                    </td>\r\n                                                                    <td id=\"deleteColumn\" className=\"bugViewTable_td\"> <Button variant=\"primary\" onClick={() => this.deleteBugButton(bug)}>Delete</Button></td>\r\n                                                        </tr>\r\n                                                    )\r\n                                     \r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n\r\n                                ) : (<h3 className=\"noResultsMessage\"> No Results to Display </h3>)} \r\n                       </div>\r\n                        \r\n                        \r\n                        \r\n                        : \r\n                        \r\n                        \r\n                        \"\"\r\n                    } \r\n                       \r\n\r\n                            {this.state.showCompletedBugs ? \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            <div>\r\n                                <hr />\r\n                                <h1 className=\"completedBugsTitle\">Completed Bugs</h1>\r\n                                {this.state.filteredCompletedBugData.length ? (\r\n                                    <div>\r\n                                    <table id=\"bugViewTable_Table\" className=\"table table-hover bugViewTable_Table\">\r\n                                        <thead id=\"bugViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Complete</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Title</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">User Assigned</th>\r\n                                                <th className=\"bugViewTable_th\" scope=\"col\">Status</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.filteredCompletedBugData.map(bug => {\r\n                                                return (\r\n                                                        \r\n                                                        <tr className=\"bugViewTable_tr\" key={bug.mongoID}>\r\n                                                            <td id=\"isCompletedColumn\" className=\"bugViewTable_td\">\r\n\r\n                                                                <label className=\"isCompletedContainer\">\r\n                                                                    <input type=\"checkbox\" checked={bug.isCompleted} onClick={() => this.completedCheck(bug)}\r\n                                                                        value={bug.isCompleted} onChange={this.handleChange.bind(this)} name=\"bugIsCompleted\"\r\n                                                                    />\r\n                                                                    <span className=\"checkmark\"></span>\r\n                                                                </label>\r\n\r\n\r\n                                                            </td>\r\n                                                            <td id=\"titleColumn\" className=\"bugViewTable_td\">{bug.bugTitle}</td>\r\n                                                            <td id=\"userAssignedColumn\" className=\"bugViewTable_td\">{bug.userAssigned}</td>\r\n                                                            <td id=\"statusColumn\" className=\"bugViewTable_td\">{bug.status}</td>\r\n                                                        </tr>\r\n                                         \r\n                                                )\r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                    </div>\r\n\r\n                                ) : (<h3 className=\"noResultsMessage\"> No Results to Display </h3>)} \r\n\r\n\r\n                            </div>\r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            :\r\n                                                      \r\n                            \r\n                            \"\"}\r\n\r\n                                <br />\r\n                                    <br />\r\n                                \r\n                       \r\n                       \r\n                \r\n                        {/* This modal will pop up for editing bugs! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Button className='btn btn-danger note-delete xButton' id=\"bugModalXButton\" onClick={() => this.closeModal()}>X</Button>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n\r\n                                <Input label=\"Title\" onBlur={this.formatInput.bind(this)} isvalid={this.state.bugTitleValid.toString()} \r\n                                fielderror={this.state.formErrors.bugTitle} value={this.state.bugTitleInModal} \r\n                                formgroupclass={`form-group ${this.errorClass(this.state.formErrors.bugTitle)}`}\r\n                                id=\"bugTitleInModal\" onChange={this.handleChange.bind(this)} name=\"bugTitleInModal\" />\r\n                                <br />\r\n                                {this.state.organizationUsers ?\r\n                                    <div>\r\n                                        <label htmlFor=\"bugUserAssignedInModal\"><strong>Assignee</strong></label> <br />\r\n                                        <select label=\"Assignee\" value={this.state.bugUserAssignedInModal} onChange={this.handleChange.bind(this)} id=\"bugUserAssignedInModal\" name=\"bugUserAssignedInModal\">\r\n                                            <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                            {this.state.organizationUsers.map(user => {\r\n                                                return (\r\n                                                    <option className=\"dropdown-item\" href=\"#\" key={user.id} value={user.text}>{user.text}</option>\r\n                                                )\r\n                                            })\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n                                    :\r\n                                    \"\"}\r\n                                <br />\r\n                                <label htmlFor=\"bugStatusInModal\"><strong>Status</strong></label>  <br />\r\n                                <select label=\"Status\" value={this.state.bugStatusInModal} onChange={this.handleChange.bind(this)} id=\"bugStatusInModal\" name=\"bugStatusInModal\">\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Open\">Open</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"In Development\">In Development</option>\r\n                                    <option className=\"dropdown-item\" href=\"#\" value=\"Needs Testing\">Needs Testing</option>\r\n                                </select>\r\n\r\n                                <br />\r\n\r\n                                <br />\r\n\r\n                                <TextArea label=\"Description\" onBlur={this.formatInput.bind(this)} value={this.state.bugDescriptionInModal} id=\"bugDescriptionInModal\" onChange={this.handleChange.bind(this)} name=\"bugDescriptionInModal\" />\r\n\r\n                                {/* BUG COMMENT SECTION */}\r\n\r\n                                {this.state.isNewBug ? \r\n\r\n                                    \"\": <div>\r\n\r\n                                        <hr />\r\n                                        {this.state.bugCommentsInModal.length ? (\r\n                                            <BugCommentContainer>\r\n                                                <div className=\"bugCommentContainer\">\r\n                                                    {this.state.bugCommentsInModal.map(bugComment => {\r\n                                                        let boundBugCommentClick = this.deleteBugComment.bind(this, bugComment);\r\n                                                        return (\r\n                                                            <div>\r\n                                                                <Button className='btn btn-danger bugComment-delete insideNote' id='cancelInsideNote' onClick={boundBugCommentClick}> X </Button>\r\n                                                           \r\n                                                                <BugCommentPanel key={bugComment._id} text={this.state.userFirstName + \" \" + this.state.userLastName + \": \" + bugComment.text} date={bugComment.timestamp}>\r\n\r\n                                                            </BugCommentPanel>\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </BugCommentContainer>\r\n                                        ) : (\r\n                                                <h3> There are no comments! </h3>\r\n                                            )}\r\n\r\n\r\n                                        <Input placeholder='Bug Comment'\r\n                                            id=\"currentBugCommentInModal\"\r\n                                            onBlur={this.formatInput.bind(this)}\r\n                                            value={this.state.currentBugCommentInModal}\r\n                                            onChange={this.handleChange.bind(this)}\r\n                                            name=\"currentBugCommentInModal\"\r\n                                        />\r\n                                        <Button className='btn btn-success save' onClick={() => this.addBugComment()}>Save Comment</Button>\r\n\r\n                                    </div>\r\n                                }\r\n\r\n                                {/* END OF BUG COMMENT SECTION */}\r\n\r\n\r\n\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"primary\" onClick={this.handleFormSubmit}>\r\n                                    Submit\r\n                              </Button> \r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n                                \r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BugViewPage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport \"./profile.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withRouter } from 'react-router';\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName:\"\",\r\n            loggedIn: this.props.loggedIn,\r\n            redirectTo: null,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            setEditOrganizationFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            formErrors: { oldPassword: \"\", newPassword1and2:\"\", organizationName:\"\", organizationID:\"\" },\r\n            oldPassword: \"\",\r\n            newPassword1: \"\",\r\n            newPassword2: \"\",\r\n            organizationNameInModal: \"\",\r\n            organizationIDInModal: \"\",\r\n            organizationMongoIDInModal: \"\",\r\n            oldPasswordValid: true,\r\n            newPassword1And2Valid: false,\r\n            organizationNameValid: false,\r\n            organizationIDValid: false,\r\n            showModal: false,\r\n            formSubmitButtonText: \"Submit\",\r\n            successMessage: \"\",\r\n            serverErrorMessage:\"\",\r\n            currentModalTitle: \"\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            userData: [],\r\n            organizations: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ userFirstName: this.props.firstName, userLastName: this.props.lastName});\r\n        this.getOrganizationsOfUserInDB();\r\n        \r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Standard method for constantly updating input, since UI is constantly refreshing\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let newPassword1And2Valid = this.state.newPassword1And2Valid;\r\n        let organizationNameValid =  this.state.organizationNameValid;\r\n        let organizationIDValid = this.state.organizationIDValid;\r\n\r\n        //Validating between the new password field and \"confirm password\" field that they match and are greather than or equal to 6 characters\r\n        newPassword1And2Valid = (this.state.newPassword1 === this.state.newPassword2) && this.state.newPassword1.length >= 6;\r\n        fieldValidationErrors.newPassword1and2 = \"New password doesn't match or your password is less than 8 characters long.\";\r\n\r\n        //Validating that organization is greater than 3 characters\r\n        organizationNameValid = this.state.organizationNameInModal.length >= 3;\r\n        fieldValidationErrors.organizationName = \"Organization Name must have atleast three characters.\";\r\n\r\n        //Validating that organization ID is greater than 6 characters\r\n        organizationIDValid = this.state.organizationIDInModal.length >= 6;\r\n        fieldValidationErrors.organizationID = \"Organization ID must have atleast six characters.\";\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            newPassword1And2Valid: newPassword1And2Valid,\r\n            organizationIDValid: organizationIDValid,\r\n            organizationNameValid: organizationNameValid\r\n        }, () => {\r\n                if (this.state.setJoinOrganizationFieldsActiveInModal) {\r\n                    //for JOIN organization\r\n                    if (organizationIDValid){\r\n                     this.attachUserToOrganizationInDB();\r\n                    }\r\n                } else if (this.state.setCreateOrganizationFieldsActiveInModal) {\r\n                    //For CREATE organization\r\n                    if(organizationNameValid && organizationIDValid){\r\n                        this.saveOrganizationInDB();\r\n                    }\r\n                } else if (this.state.setEditOrganizationFieldsActiveInModal) {\r\n                    //For UPDATE Organization\r\n                    if(organizationNameValid && organizationIDValid){\r\n\r\n                        this.updateOrganizationInDB();\r\n                    }\r\n                } else if (this.state.setPasswordFieldsActiveInModal) {\r\n                    //For UPDATE password\r\n                    if (newPassword1And2Valid){     \r\n                        this.updatePasswordInDB();\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    \r\n    handleChangePasswordButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Change Password\",\r\n            setPasswordFieldsActiveInModal: true\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updatePasswordInDB = () => {\r\n\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n        API.updateUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.setState({ successMessage: \"Successfully updated password.\"})\r\n                    this.closeModal();\r\n\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error, formErrors: { oldPassword: \"\", newPassword1and2: \"\", organizationName: \"\", organizationID: \"\", serverErrorMessage: \"\" }})\r\n                }\r\n            })\r\n        \r\n    }\r\n    closeModal = () => {\r\n        //Reset all the fields so they don't show up again when you try to open the modal again.\r\n        this.setState({ showModal: false, organizationIDValid: true,\r\n        organizationNameValid: true, oldPasswordValid: true, newPassword1Valid: true, newPassword2Valid: true,\r\n            organizationNameInModal: \"\", organizationIDInModal: \"\", oldPassword: \"\", newPassword: \"\", newPassword2: \"\", serverErrorMessage:\"\",\r\n            formErrors: { oldPassword: \"\", newPassword1and2: \"\", organizationName: \"\", organizationID: \"\", serverErrorMessage: \"\", formSubmitButtonText: \"Submit\" } });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n    //*************************METHODS BELOW RELATED TO ORGANIZATION BUTTON CLICKS ******************/\r\n    handleEditOrganizationButtonClick(organizationClickedOn) {\r\n        //event.preventDefault();\r\n\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Edit Organization\",\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setEditOrganizationFieldsActiveInModal: true,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            organizationMongoIDInModal: organizationClickedOn._id,\r\n            organizationNameInModal: organizationClickedOn.name,\r\n            organizationIDInModal: organizationClickedOn.organizationID\r\n        });\r\n    }\r\n\r\n    handleCreateOrganizationButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Create Organization\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: true,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            organizationIDInModal: \"\",\r\n            organizationNameInModal: \"\"\r\n        });\r\n\r\n    }\r\n\r\n    handleJoinOrganizationButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Join Organization\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            setJoinOrganizationFieldsActiveInModal: true\r\n        })\r\n\r\n    }\r\n    handleDeleteOrLeaveButtonClick(organization) {\r\n        this.setState({ setConfirmationBoxActiveInModal: true, showModal: true, currentOrganization: organization,\r\n            currentModalTitle: \"\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateOrganizationFieldsActiveInModal: false,\r\n            setJoinOrganizationFieldsActiveInModal: false,\r\n            formSubmitButtonText: \"Confirm\",\r\n            successMessage: \"\",\r\n            organizationIDInModal: \"\",\r\n            organizationNameInModal: \"\"    \r\n        });\r\n    }\r\n\r\n    //*** METHODS BELOW RELATED TO DB WITH ORGANIZATIONS */ */\r\n    saveOrganizationInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            organizationName: this.state.organizationNameInModal,\r\n            organizationID: this.state.organizationIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.saveOrganizationInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getOrganizationsOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({serverErrorMessage: response.data.error})\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    getOrganizationsOfUserInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n\r\n        API.getOrganizationsOfUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of organizations. Update state with organizations.\r\n\r\n                    this.setState({\r\n                        organizations: response.data.organizations,\r\n                    })\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    attachUserToOrganizationInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            organizationID: this.state.organizationIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n        API.attachUserToOrganizationInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of organizations. Update state with organizations.\r\n                    this.setState({\r\n                        organizations: response.data.organizations,\r\n                        successMessage: \"You successfully joined the organization!\"\r\n                    })\r\n                    this.closeModal();\r\n                    this.getOrganizationsOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({ serverErrorMessage: response.data.error });\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleDeleteOrganizationInDB(organizationClickedOn) {\r\n        var isUserOrganizationOwner = false;\r\n        if (this.props.mongoID === organizationClickedOn.userWhoCreatedOrgMongoID){\r\n            isUserOrganizationOwner = true;\r\n        }\r\n        var organizationObj = {\r\n            organizationMongoID: organizationClickedOn._id,\r\n            userMongoID: this.props.mongoID,\r\n            organizationData: organizationClickedOn,\r\n            isUserOrganizationOwner: isUserOrganizationOwner,\r\n            userFirstName: this.state.userFirstName,\r\n            userLastName: this.state.userLastName\r\n        }\r\n        API.deleteOrganizationInDB(organizationObj)\r\n            .then(res => {\r\n                this.setState({currentOrganization: \"\"});\r\n                this.getOrganizationsOfUserInDB();\r\n                this.forceUpdate();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    updateOrganizationInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            organizationMongoID: this.state.organizationMongoIDInModal,\r\n            organizationName: this.state.organizationNameInModal,\r\n            organizationID: this.state.organizationIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.updateOrganizationInDB(userObj)\r\n            .then(response => {\r\n                //If not error from server\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getOrganizationsOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleSubmitButtonInModalClick = () => {\r\n        if(this.state.setConfirmationBoxActiveInModal){\r\n            //In this case we are confirming to delete or leave an organization.\r\n            this.setState({setConfirmationBoxActiveInModal: false, showModal: false}, () => {\r\n                    this.handleDeleteOrganizationInDB(this.state.currentOrganization);\r\n            }\r\n            )\r\n        }else {\r\n            this.validateFields();\r\n        }\r\n    }\r\n\r\n    handleLogoutButtonClick = () => {\r\n        window.location.reload(false);\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <Container id=\"containerViewBugs\" fluid=\"true\">\r\n\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 BugTrackerTitle\">Welcome, {this.props.firstName}!</h1>\r\n                                <h2 className=\"display-4 BugTrackerTitle\" id=\"successMessage\">{this.state.successMessage}</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <Button onClick={this.handleChangePasswordButtonClick.bind(this)}>Change Password</Button>\r\n                        <Button onClick={this.handleCreateOrganizationButtonClick.bind(this)}>Create Organization</Button>\r\n                        <Button onClick={this.handleJoinOrganizationButtonClick.bind(this)}>Join Organization</Button>\r\n                        <br />\r\n                        <br />\r\n                        {this.state.organizations.length > 0 ? (\r\n                            <table id=\"organizationTable_Table\" className=\"table table-hover bugViewTable_Table\">\r\n                                <thead id=\"organizationTable_head\" className=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\">Name</th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\">Organization ID</th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"organizationTable_th\" scope=\"col\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.organizations.map(organization => {\r\n                                        return (\r\n                                            <tr className=\"organizationTable_tr\" key={organization._id}>\r\n                                                <td id=\"organizationNameColumn\" className=\"organizationTable_td\">{organization.name}</td>\r\n                                                <td id=\"organizationIDColumn\" className=\"organizationTable_td\">{organization.organizationID}</td>\r\n                                                <td id=\"viewBugColumn\" className=\"organizationTable_td\">\r\n                                                    \r\n                                                    <Link to={{pathname: \"/bug-view\", state: {organizationMongoID: organization._id, organizationName: organization.name, organizationUsers: organization.users, userFirstName: this.state.userFirstName, userLastName: this.state.userLastName}}} className=\"log\" ><Button>View Bugs</Button></Link>\r\n                                                    </td>\r\n                                                <td id=\"editColumn\" className=\"organizationTable_td\">\r\n                                                    {this.props.mongoID === organization.userWhoCreatedOrgMongoID ?\r\n                                                        <Button variant=\"primary\" onClick={() => this.handleEditOrganizationButtonClick(organization)}>\r\n                                                            Edit\r\n                                                        </Button> : \"\"\r\n\r\n                                                    }\r\n                                                </td>\r\n                                                <td id=\"deleteColumn\" className=\"organizationTable_td\">\r\n                                                    {this.props.mongoID === organization.userWhoCreatedOrgMongoID ?\r\n\r\n                                                        < Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(organization)}>Delete</Button> \r\n                                                        : \r\n                                                        <Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(organization)}>Leave</Button> \r\n                                                    }\r\n                                                     </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n\r\n                        ) : (<h3 id=\"noResultsHeader\"> No Results to Display </h3>)}\r\n                        <br />\r\n                        <br />\r\n\r\n                        {/* This modal will pop up for changing password! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                {this.state.setConfirmationBoxActiveInModal ?\r\n                                    <h1 id=\"confirmationHeader\">Are you sure?</h1>   \r\n                                :\r\n                                    <div>\r\n                                        {this.state.setPasswordFieldsActiveInModal ?\r\n                                            <div>\r\n                                                <Input type=\"password\" label=\"Old Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.oldPasswordValid.toString()}\r\n                                                    fielderror={this.state.formErrors.oldPassword}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.oldPassword)}`}\r\n                                                    value={this.state.oldPassword}\r\n                                                    id=\"oldPassword\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"oldPassword\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"New Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword1and2}\r\n                                                    id=\"newPassword1\" onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword1\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"Confirm New Password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword2}\r\n                                                    id=\"newPassword2\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword2\"></Input>\r\n\r\n                                            </div>\r\n                                            :\r\n                                            <div>\r\n                                                {this.state.setJoinOrganizationFieldsActiveInModal ?\r\n                                                    <div>\r\n                                                        <Input label=\"Please enter the Organization ID of the organization you wish to join:\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.organizationIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.organizationID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.organizationID)}`}\r\n                                                            value={this.state.organizationIDInModal}\r\n                                                            id=\"organizationIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"organizationIDInModal\"></Input>\r\n\r\n                                                    </div>\r\n                                                    :\r\n                                                    <div>\r\n                                                        <Input label=\"Organization Name\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.organizationNameValid.toString()}\r\n                                                            fielderror={this.state.formErrors.organizationName}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.organizationName)}`}\r\n                                                            value={this.state.organizationNameInModal}\r\n                                                            id=\"organizationNameInModal\"\r\n                                                            onChange={this.handleChange.bind(this)}\r\n                                                            name=\"organizationNameInModal\"></Input>\r\n\r\n                                                        <Input label=\"Organization ID (Use this ID to invite people)\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.organizationIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.organizationID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.organizationID)}`}\r\n                                                            value={this.state.organizationIDInModal}\r\n                                                            id=\"organizationIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"organizationIDInModal\"></Input>\r\n                                                    </div>\r\n\r\n                                                }\r\n\r\n                                            </div>\r\n\r\n                                        }\r\n\r\n                                    </div>\r\n                                }\r\n                        \r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                                    Cancel\r\n                                  </Button>\r\n                                <Button variant=\"primary\" onClick={this.handleSubmitButtonInModalClick.bind(this)}>\r\n                                {this.state.formSubmitButtonText}\r\n                                </Button>\r\n\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n    \r\n}\r\n}\r\n\r\n// export default Profile;\r\nexport default withRouter(Profile);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"./pages/landing-page\";\nimport BugView from \"./pages/bug-view\";\nimport Profile from \"./pages/profile\";\nimport API from \"./utils/API\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      loggedIn: false,\n      user: null,\n      userId: null,\n      firstName: null,\n      lastName: null,\n      mongoID: null,\n      password: null,\n      redirectTo: null,\n      serverErrorMessage: \"\"\n    }\n    this._login = this._login.bind(this)\n  }\n  componentDidMount() {\n    API.user().then(response => {\n      if (!!response.data.user) {\n        this.setState({\n          loggedIn: true,\n          userId: response.data.user._id,\n        });\n      } else {\n        this.setState({\n          loggedIn: false,\n          // redirectTo: \"/landing-page\",\n          user: null\n        })\n      }\n    })\n  }\n\n  _login(username, password) {\n    var userData = {\n      username: username,\n      password: password,\n    }\n    API\n      .login(userData)\n      .then(response => {\n        if (response.status === 200) {\n          if (response.data.loggedInSuccess) {\n            // update the state\n            this.setState({\n              loggedIn: true,\n              // user: response.data.user,\n              // userId: response.data.user._id,\n              username: response.data.username,\n              mongoID: response.data.mongoID,\n              firstName: response.data.firstName,\n              lastName: response.data.lastName,\n              password: response.data.password,\n              redirectTo: \"/profile\"\n            })\n            //this.props.history.push(\"/profile\");\n\n\n          } else {\n            this.setState({\n              loggedIn: false,\n              serverErrorMessage: response.data.error\n            }, () => {\n              this.forceUpdate();\n            })\n\n          }\n        }\n      })\n  }\n\n  render() {\n    //IF USER IS AUTHENTICATED RENDER THIS\n    if (this.state.loggedIn) {\n      return (\n\n        <div className=\"App\">\n          <div>\n\n            <Redirect exact to={{ pathname: this.state.redirectTo }} render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n\n            <Route exact path=\"/landing-page\"\n              render={() =>\n                <LandingPage\n                  _login={this._login}\n                  serverErrorMessage={this.state.serverErrorMessage}\n                />} />\n            <Route exact path=\"/bug-view\" component={BugView} />\n            <Route exact path=\"/profile\" render={() => <Profile loggedIn={this.state.loggedIn} username={this.state.username} mongoID={this.state.mongoID} firstName={this.state.firstName} lastName={this.state.lastName} />} />\n\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/landing-page\" />\n            )} />\n\n          </div>\n        </div>\n\n      )\n    }\n\n\n    //IF USER IS NOT AUTHENTICATED, RENDER JUST THE LANDING PAGE\n    return (\n      <div className=\"App\">\n        <div>\n          <Route exact path=\"/landing-page\"\n            render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/landing-page\" />\n          )} />\n\n          <Redirect from=\"*\" to=\"/landing-page\" />\n\n        </div>\n      </div>\n    )\n  }\n\n}\nexport default App;\n// export default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from 'react-router-dom'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nReactDOM.render(\n <BrowserRouter>   \n   <Switch>\n      <Route component={App} />\n   </Switch>\n </BrowserRouter>\n\n  , document.getElementById(\"root\"));\n\n"],"sourceRoot":""}